{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/weDAO/smart-contracts/we_dao/smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;AAAA;;AA0IG;;AAAA;AAAA;AAAA;;AAAA;AA1IH;;;AAAA;AA0IG;;;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AAhIH;;;AAAA;AAAA;;;AAAA;AAAA;;AAgIG;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAvDA;;AAAA;AAAA;AAAA;;AAAA;AAzEH;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAyEG;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AA4BG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBH;;;;AAAA;AAgBG;;;AAAA;;AAAD;;;AAdA;AAiBmC;;AAAjC;AAdF;AAiB8B;AAA5B;AAdF;;AAiBE;;AAAA;;AAGF;;;AApBA;AAAA;;AAAA;AAAA;AA2BE;;;AAjCF;AAAA;AAAA;AAAA;AAkC8C;;AAAnC;AAAP;AAIyC;;AAI5B;;AAAA;;AAAU;AAAlB;AAAP;AAGe;;AAAA;;AAAuB;;AAA/B;AAAP;AAGM;AAAA;;AAAoC;AAGb;AACD;AAAA;AAGV;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AALiB;;AAAA;AAGX;;AAHW;AAIb;;AAJa;AAAA;;;;AAAA;AAAA;AAAA;AA/CrC;AAAA;AAAA;AAAA;AAwD8D;AAA5B;AAGV;AAAA;AArDyC;AAAA;AAAA;AAqDL;AAAA;AAAA;;AAAnD;AAAP;AA3DF;AA8DE;;AAAA;AAGA;AAAA;;AAAA;AAAA;;AAGF;;;AAIkB;;AAAA;AAlE+C;AAAA;;AAAA;AAkEhB;AAAA;AAAA;;AAD/C;AAQsC;;AAFvB;;AAAA;AAAA;AApEoC;;AAAA;AAAA;AA0EzB;AAAA;AAAA;;AAAnB;AAAP;AAGuF;;AAAA;AAAA;AAGzD;;AACxB;;AAA6B;AAA0B;AACtD;;AAAA;AAAP;AAGW;;AAjGb;AAAA;AAAA;AAAA;AAiGS;AAAP;AAGe;;AAAA;;AAAU;AAAlB;AAAP;AAGe;;AAAA;;AAAuB;;AAA/B;AAAP;AAIkB;AAI+C;;AAArB;;AAAqB;AAAS;AAA9C;AACsC;;AAAnB;;AAAmB;AAA5D;;AAAyB;AAIQ;AAAA;AAAvC;;AAAA;AAAA;;AACqC;AAAA;AAArC;;AAGA;;AAAA;AAEA;;AAAA;;AAAA;;AAIF;;;AAGiB;;AAAA;AADA;;AAAA;AApHoC;;AAAA;AAAA;AAyH1B;AAAA;;AAAzB;AAGF;;;AAEmD;;AAAA;AAjIc;AAAA;AAAA;AAiIiB;AAAA;AAChF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 1 0 14490"
    },
    "7": {
      "op": "bytecblock \"manager_address\" \"proposal_count\" \"_p\" 0x151f7c75 \"anyone_can_create\" 0x0000000000000000 \"_v\""
    },
    "78": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "80": {
      "op": "bz main_after_if_else@11",
      "stack_out": []
    },
    "83": {
      "op": "pushbytess 0xcb4abfb5 0xef0ffc68 0x6b509907 0x97d5cecd 0xff7562c0 // method \"createApplication(bool)void\", method \"createProposal(string,string,uint64,pay)void\", method \"voteProposal(uint64,bool,pay)void\", method \"hasVoted(uint64,account)bool\", method \"getProposal(uint64)(uint64,uint64,uint64,uint64,string)\"",
      "defined_out": [
        "Method(createApplication(bool)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,string))",
        "Method(hasVoted(uint64,account)bool)",
        "Method(voteProposal(uint64,bool,pay)void)"
      ],
      "stack_out": [
        "Method(createApplication(bool)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "Method(hasVoted(uint64,account)bool)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,string))"
      ]
    },
    "110": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(createApplication(bool)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,string))",
        "Method(hasVoted(uint64,account)bool)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(bool)void)",
        "Method(createProposal(string,string,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay)void)",
        "Method(hasVoted(uint64,account)bool)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,string))",
        "tmp%2#0"
      ]
    },
    "113": {
      "op": "match main_createApplication_route@3 main_createProposal_route@4 main_voteProposal_route@5 main_hasVoted_route@6 main_getProposal_route@7",
      "stack_out": []
    },
    "125": {
      "block": "main_after_if_else@11",
      "stack_in": [],
      "op": "intc_1 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "126": {
      "op": "return",
      "stack_out": []
    },
    "127": {
      "block": "main_getProposal_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "129": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "130": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "131": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "133": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "134": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "137": {
      "op": "btoi",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "138": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.getProposal",
      "op": "callsub getProposal",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "141": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "0x151f7c75"
      ]
    },
    "142": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%38#0"
      ]
    },
    "143": {
      "op": "concat",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "144": {
      "op": "log",
      "stack_out": []
    },
    "145": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "146": {
      "op": "return",
      "stack_out": []
    },
    "147": {
      "block": "main_hasVoted_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "149": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "150": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "151": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "153": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "154": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "157": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "158": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "161": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "162": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "164": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.hasVoted",
      "op": "callsub hasVoted",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "167": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00"
      ]
    },
    "170": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "0x00",
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0",
        "0x00",
        "0"
      ]
    },
    "171": {
      "op": "uncover 2",
      "stack_out": [
        "0x00",
        "0",
        "to_encode%0#0"
      ]
    },
    "173": {
      "op": "setbit",
      "defined_out": [
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0"
      ]
    },
    "174": {
      "op": "bytec_3 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ],
      "stack_out": [
        "encoded_bool%0#0",
        "0x151f7c75"
      ]
    },
    "175": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "encoded_bool%0#0"
      ]
    },
    "176": {
      "op": "concat",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "177": {
      "op": "log",
      "stack_out": []
    },
    "178": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "179": {
      "op": "return",
      "stack_out": []
    },
    "180": {
      "block": "main_voteProposal_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "182": {
      "op": "!",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "183": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "184": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "186": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "187": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "190": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "191": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "194": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%1#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "195": {
      "op": "getbit",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "196": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ]
    },
    "198": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "tmp%24#0",
        "1"
      ]
    },
    "199": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%1#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0"
      ]
    },
    "200": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "201": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "203": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "204": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "205": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0",
        "gtxn_idx%1#0"
      ]
    },
    "206": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.voteProposal",
      "op": "callsub voteProposal",
      "stack_out": []
    },
    "209": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "210": {
      "op": "return",
      "stack_out": []
    },
    "211": {
      "block": "main_createProposal_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "213": {
      "op": "!",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "214": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "215": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "217": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "218": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "221": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "224": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%13#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%14#0"
      ]
    },
    "227": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "230": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "233": {
      "op": "btoi",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "234": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ]
    },
    "236": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "tmp%17#0",
        "1"
      ]
    },
    "237": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0"
      ]
    },
    "238": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "239": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "241": {
      "op": "intc_0 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "pay"
      ]
    },
    "242": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "243": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%13#0",
        "tmp%15#0",
        "tmp%16#0",
        "gtxn_idx%0#0"
      ]
    },
    "244": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createProposal",
      "op": "callsub createProposal",
      "stack_out": []
    },
    "247": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "248": {
      "op": "return",
      "stack_out": []
    },
    "249": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "251": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "252": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "253": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "255": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "256": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "257": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "260": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "261": {
      "op": "getbit",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "262": {
      "callsub": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "265": {
      "op": "intc_0 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "266": {
      "op": "return",
      "stack_out": []
    },
    "267": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createApplication",
      "params": {
        "anyone_can_create#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "270": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\""
      ],
      "stack_out": [
        "\"manager_address\""
      ]
    },
    "271": {
      "op": "txn Sender",
      "defined_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ]
    },
    "273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "274": {
      "op": "bytec_1 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\""
      ],
      "stack_out": [
        "\"proposal_count\""
      ]
    },
    "275": {
      "op": "intc_1 // 0",
      "defined_out": [
        "\"proposal_count\"",
        "0"
      ],
      "stack_out": [
        "\"proposal_count\"",
        "0"
      ]
    },
    "276": {
      "op": "app_global_put",
      "stack_out": []
    },
    "277": {
      "op": "bytec 4 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\""
      ],
      "stack_out": [
        "\"anyone_can_create\""
      ]
    },
    "279": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ],
      "stack_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ]
    },
    "281": {
      "op": "app_global_put",
      "stack_out": []
    },
    "282": {
      "retsub": true,
      "op": "retsub"
    },
    "283": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createProposal",
      "params": {
        "proposal_title#0": "bytes",
        "proposal_description#0": "bytes",
        "expires_in#0": "uint64",
        "mbr_txn#0": "uint64"
      },
      "block": "createProposal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "286": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "287": {
      "op": "bytec 4 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"anyone_can_create\""
      ]
    },
    "289": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "290": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "291": {
      "op": "bnz createProposal_after_if_else@2",
      "stack_out": []
    },
    "294": {
      "op": "intc_1 // 0",
      "stack_out": [
        "0"
      ]
    },
    "295": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager_address\""
      ]
    },
    "296": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "297": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "298": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "300": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "301": {
      "error": "Only the manager can create proposals",
      "op": "assert // Only the manager can create proposals",
      "stack_out": []
    },
    "302": {
      "block": "createProposal_after_if_else@2",
      "stack_in": [],
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentTimestamp#0"
      ],
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "304": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "306": {
      "op": "gtxns Amount",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%3#0"
      ]
    },
    "308": {
      "op": "intc_2 // 14490",
      "defined_out": [
        "14490",
        "currentTimestamp#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%3#0",
        "14490"
      ]
    },
    "309": {
      "op": ">=",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%4#0"
      ]
    },
    "310": {
      "error": "Payment must cover the box MBR",
      "op": "assert // Payment must cover the box MBR",
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "311": {
      "op": "frame_dig -1",
      "stack_out": [
        "currentTimestamp#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "313": {
      "op": "gtxns Receiver",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%5#0"
      ]
    },
    "315": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "317": {
      "op": "==",
      "defined_out": [
        "currentTimestamp#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "tmp%7#0"
      ]
    },
    "318": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": [
        "currentTimestamp#0"
      ]
    },
    "319": {
      "op": "dup",
      "defined_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)"
      ]
    },
    "320": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)"
      ]
    },
    "322": {
      "op": "+",
      "defined_out": [
        "currentTimestamp#0",
        "proposal_expiry_timestamp#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "proposal_expiry_timestamp#0"
      ]
    },
    "323": {
      "op": "itob",
      "defined_out": [
        "currentTimestamp#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "currentTimestamp#0",
        "val_as_bytes%0#0"
      ]
    },
    "324": {
      "op": "swap",
      "stack_out": [
        "val_as_bytes%0#0",
        "currentTimestamp#0"
      ]
    },
    "325": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "326": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_title#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "proposal_title#0 (copy)"
      ]
    },
    "328": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length%0#0"
      ]
    },
    "329": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "as_bytes%0#0"
      ]
    },
    "330": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0"
      ]
    },
    "333": {
      "op": "frame_dig -4",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "length_uint16%0#0",
        "proposal_title#0 (copy)"
      ]
    },
    "335": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "encoded_value%0#0"
      ]
    },
    "336": {
      "op": "cover 2",
      "stack_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "338": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "339": {
      "op": "bytec 5 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "341": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "342": {
      "op": "bytec 5 // 0x0000000000000000",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "344": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "345": {
      "op": "pushbytes 0x0022",
      "defined_out": [
        "0x0022",
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "0x0022"
      ]
    },
    "349": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "350": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0"
      ]
    },
    "351": {
      "op": "concat",
      "defined_out": [
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0"
      ]
    },
    "352": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0"
      ]
    },
    "353": {
      "op": "bytec_1 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\"",
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0",
        "\"proposal_count\""
      ]
    },
    "354": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "355": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0"
      ]
    },
    "356": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "357": {
      "op": "+",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0"
      ]
    },
    "358": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)"
      ]
    },
    "359": {
      "op": "itob",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%2#0"
      ]
    },
    "360": {
      "op": "bytec_2 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%2#0",
        "\"_p\""
      ]
    },
    "361": {
      "op": "swap",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "\"_p\"",
        "val_as_bytes%2#0"
      ]
    },
    "362": {
      "op": "concat",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0"
      ]
    },
    "363": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "364": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "newProposalNonce#0",
        "proposal#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "365": {
      "op": "bury 1",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0",
        "maybe_exists%3#0"
      ]
    },
    "367": {
      "op": "!",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "368": {
      "error": "Proposal already exists",
      "op": "assert // Proposal already exists",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0"
      ]
    },
    "369": {
      "op": "bytec_1 // \"proposal_count\"",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%8#0",
        "\"proposal_count\""
      ]
    },
    "370": {
      "op": "uncover 2",
      "stack_out": [
        "proposal#0",
        "tmp%8#0",
        "\"proposal_count\"",
        "newProposalNonce#0"
      ]
    },
    "372": {
      "op": "app_global_put",
      "stack_out": [
        "proposal#0",
        "tmp%8#0"
      ]
    },
    "373": {
      "op": "dup",
      "stack_out": [
        "proposal#0",
        "tmp%8#0",
        "tmp%8#0 (copy)"
      ]
    },
    "374": {
      "op": "box_del",
      "defined_out": [
        "proposal#0",
        "tmp%8#0",
        "{box_del}"
      ],
      "stack_out": [
        "proposal#0",
        "tmp%8#0",
        "{box_del}"
      ]
    },
    "375": {
      "op": "pop",
      "stack_out": [
        "proposal#0",
        "tmp%8#0"
      ]
    },
    "376": {
      "op": "swap",
      "stack_out": [
        "tmp%8#0",
        "proposal#0"
      ]
    },
    "377": {
      "op": "box_put",
      "stack_out": []
    },
    "378": {
      "retsub": true,
      "op": "retsub"
    },
    "379": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.voteProposal",
      "params": {
        "proposal_id#0": "uint64",
        "vote#0": "uint64",
        "mbr_txn#0": "uint64"
      },
      "block": "voteProposal",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "382": {
      "op": "frame_dig -3",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "384": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "385": {
      "op": "bytec_2 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "386": {
      "op": "dig 1",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "388": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "389": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "390": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "391": {
      "op": "bury 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "393": {
      "error": "The proposal the user is trying to vote on does not exist",
      "op": "assert // The proposal the user is trying to vote on does not exist",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "394": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "396": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "398": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "399": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0"
      ]
    },
    "400": {
      "op": "bytec 6 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0",
        "\"_v\""
      ]
    },
    "402": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"_v\"",
        "voteId#0"
      ]
    },
    "403": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "404": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "405": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "406": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "408": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "409": {
      "error": "The user has already voted on this proposal",
      "op": "assert // The user has already voted on this proposal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "410": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "412": {
      "op": "box_get",
      "defined_out": [
        "currentProposal#0",
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "maybe_exists%2#0"
      ]
    },
    "413": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0"
      ]
    },
    "414": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "416": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "currentProposal#0 (copy)"
      ]
    },
    "418": {
      "op": "intc_1 // 0",
      "defined_out": [
        "0",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "currentProposal#0 (copy)",
        "0"
      ]
    },
    "419": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0"
      ]
    },
    "420": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "currentTime#0 (copy)",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0",
        "currentTime#0 (copy)"
      ]
    },
    "422": {
      "op": ">",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%6#0"
      ]
    },
    "423": {
      "error": "The proposal has expired",
      "op": "assert // The proposal has expired",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "424": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0"
      ]
    },
    "426": {
      "op": "intc_1 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "0"
      ]
    },
    "427": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "0",
        "\"manager_address\""
      ]
    },
    "428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "429": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%7#0",
        "maybe_value%3#0"
      ]
    },
    "430": {
      "op": "!=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%8#0"
      ]
    },
    "431": {
      "error": "The manager cannot vote on proposals",
      "op": "assert // The manager cannot vote on proposals",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "432": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "434": {
      "op": "gtxns Amount",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%9#0"
      ]
    },
    "436": {
      "op": "intc_2 // 14490",
      "defined_out": [
        "14490",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%9#0",
        "14490"
      ]
    },
    "437": {
      "op": ">=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%10#0"
      ]
    },
    "438": {
      "error": "Payment must cover the vote box MBR",
      "op": "assert // Payment must cover the vote box MBR",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "439": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "441": {
      "op": "gtxns Receiver",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%11#0"
      ]
    },
    "443": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%12#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%11#0",
        "tmp%12#0"
      ]
    },
    "445": {
      "op": "==",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%13#0"
      ]
    },
    "446": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "currentTime#0"
      ]
    },
    "447": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0"
      ]
    },
    "448": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "currentProposal#0 (copy)"
      ]
    },
    "450": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "currentProposal#0 (copy)",
        "16"
      ]
    },
    "452": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "tmp%15#0"
      ]
    },
    "453": {
      "op": "intc_0 // 1",
      "defined_out": [
        "1",
        "currentProposal#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%2#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "tmp%15#0",
        "1"
      ]
    },
    "454": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0"
      ]
    },
    "455": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)"
      ]
    },
    "457": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)",
        "24"
      ]
    },
    "459": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%2#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%17#0"
      ]
    },
    "460": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%2#0",
        "updatedVotes#0",
        "vote#0 (copy)",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%17#0",
        "vote#0 (copy)"
      ]
    },
    "462": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0"
      ]
    },
    "463": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedVotes#0"
      ]
    },
    "464": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0"
      ]
    },
    "465": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0",
        "currentProposal#0"
      ]
    },
    "467": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "currentProposal#0",
        "val_as_bytes%4#0"
      ]
    },
    "468": {
      "op": "replace2 16",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedProposal#1",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedProposal#1"
      ]
    },
    "470": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "updatedYesVotes#0"
      ]
    },
    "471": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedProposal#1",
        "val_as_bytes%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "val_as_bytes%5#0"
      ]
    },
    "472": {
      "op": "replace2 24",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1"
      ]
    },
    "474": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%2#0",
        "voteData#0"
      ]
    },
    "476": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "477": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%0#0 (copy)"
      ]
    },
    "479": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ]
    },
    "480": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "481": {
      "op": "box_put",
      "stack_out": []
    },
    "482": {
      "retsub": true,
      "op": "retsub"
    },
    "483": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.hasVoted",
      "params": {
        "proposal_id#0": "uint64",
        "voter#0": "bytes"
      },
      "block": "hasVoted",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "486": {
      "op": "frame_dig -2",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "488": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "489": {
      "op": "frame_dig -1",
      "defined_out": [
        "val_as_bytes%0#0",
        "voter#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "voter#0 (copy)"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "voteId#0"
      ],
      "stack_out": [
        "voteId#0"
      ]
    },
    "492": {
      "op": "bytec 6 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "voteId#0"
      ],
      "stack_out": [
        "voteId#0",
        "\"_v\""
      ]
    },
    "494": {
      "op": "swap",
      "stack_out": [
        "\"_v\"",
        "voteId#0"
      ]
    },
    "495": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "496": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "497": {
      "op": "bury 1",
      "stack_out": [
        "maybe_exists%0#0"
      ]
    },
    "499": {
      "retsub": true,
      "op": "retsub"
    },
    "500": {
      "subroutine": "smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.getProposal",
      "params": {
        "proposal_id#0": "uint64"
      },
      "block": "getProposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "503": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "505": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "506": {
      "op": "bytec_2 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "507": {
      "op": "swap",
      "stack_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ]
    },
    "508": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "509": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_exists%0#0"
      ]
    },
    "510": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "proposal#0"
      ]
    },
    "511": {
      "retsub": true,
      "op": "retsub"
    }
  }
}