{
    "name": "YesNoDao",
    "structs": {
        "ProposalDataType": [
            {
                "name": "proposal_expiry_timestamp",
                "type": "uint64"
            },
            {
                "name": "proposal_start_timestamp",
                "type": "uint64"
            },
            {
                "name": "proposal_total_votes",
                "type": "uint64"
            },
            {
                "name": "proposal_yes_votes",
                "type": "uint64"
            },
            {
                "name": "proposal_title",
                "type": "string"
            }
        ],
        "VoteDataType": [
            {
                "name": "vote_timestamp",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "bool",
                    "name": "anyone_can_create"
                },
                {
                    "type": "uint64",
                    "name": "minimum_holding"
                },
                {
                    "type": "uint64",
                    "name": "asset_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "configureContract",
            "args": [
                {
                    "type": "bool",
                    "name": "anyone_can_create"
                },
                {
                    "type": "uint64",
                    "name": "minimum_holding"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createProposal",
            "args": [
                {
                    "type": "string",
                    "name": "proposal_title"
                },
                {
                    "type": "string",
                    "name": "proposal_description"
                },
                {
                    "type": "uint64",
                    "name": "expires_in"
                },
                {
                    "type": "pay",
                    "name": "mbr_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "voteProposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "bool",
                    "name": "vote"
                },
                {
                    "type": "pay",
                    "name": "mbr_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "hasVoted",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "account",
                    "name": "voter"
                }
            ],
            "returns": {
                "type": "bool"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,string)",
                "struct": "ProposalDataType"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "manager_address": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bWFuYWdlcl9hZGRyZXNz"
                },
                "proposal_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY291bnQ="
                },
                "anyone_can_create": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YW55b25lX2Nhbl9jcmVhdGU="
                },
                "asset_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRfaWQ="
                },
                "minimum_holding": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluaW11bV9ob2xkaW5n"
                }
            },
            "local": {},
            "box": {
                "proposal": {
                    "keyType": "AVMString",
                    "valueType": "ProposalDataType",
                    "key": "X3A="
                },
                "vote": {
                    "keyType": "AVMString",
                    "valueType": "VoteDataType",
                    "key": "X3Y="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        514,
                        628
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        162,
                        183,
                        217,
                        248,
                        286,
                        311
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        368
                    ],
                    "errorMessage": "Only the manager can configure the contract"
                },
                {
                    "pc": [
                        400
                    ],
                    "errorMessage": "Only the manager can create proposals"
                },
                {
                    "pc": [
                        417,
                        547
                    ],
                    "errorMessage": "Payment must be to the contract"
                },
                {
                    "pc": [
                        409
                    ],
                    "errorMessage": "Payment must cover the box MBR"
                },
                {
                    "pc": [
                        539
                    ],
                    "errorMessage": "Payment must cover the vote box MBR"
                },
                {
                    "pc": [
                        468
                    ],
                    "errorMessage": "Proposal already exists"
                },
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "The manager cannot vote on proposals"
                },
                {
                    "pc": [
                        524
                    ],
                    "errorMessage": "The proposal has expired"
                },
                {
                    "pc": [
                        494
                    ],
                    "errorMessage": "The proposal the user is trying to vote on does not exist"
                },
                {
                    "pc": [
                        563
                    ],
                    "errorMessage": "The user does not have enough asset to vote"
                },
                {
                    "pc": [
                        510
                    ],
                    "errorMessage": "The user has already voted on this proposal"
                },
                {
                    "pc": [
                        315
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        165,
                        186,
                        220,
                        251,
                        289
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        364,
                        389,
                        396,
                        454,
                        530,
                        554,
                        561
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        239,
                        277
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiADAAGacSYJD21hbmFnZXJfYWRkcmVzcw5wcm9wb3NhbF9jb3VudBFhbnlvbmVfY2FuX2NyZWF0ZQ9taW5pbXVtX2hvbGRpbmcIYXNzZXRfaWQCX3AEFR98dQgAAAAAAAAAAAJfdjEbQQAxggYE8V5TsgQhuJ3eBO8P/GgEa1CZBwSX1c7NBP91YsA2GgCOBgCXAH4AWAA5ABcAAiJDMRkURDEYRDYaAReIAbwnBkxQsCNDMRkURDEYRDYaARc2GgIXwByIAZCAAQAiTwJUJwZMULAjQzEZFEQxGEQ2GgEXNhoCIlMxFiMJSTgQIxJEiADsI0MxGRREMRhENhoBVwIANhoCVwIANhoDFzEWIwlJOBAjEkSIAGYjQzEZFEQxGEQ2GgEiUzYaAhc2GgMXiAA0I0MxGRREMRgURDYaASJTNhoCFzYaAxeIAAIjQ4oDACgxAGcpImcqi/1nK4v+ZycEi/9niYoDACIoZUQxABJEKov9ZyuL/mcnBIv/Z4mKBAAiKmVEQAAIIihlRDEAEkQyB4v/OAgkD0SL/zgHMgoSREmL/ggWTBaL/BUWVwYCi/xQTgJQJwdQJwdQgAIAIlBMUCIpZUQjCEkWJwVMUEm9RQEURClPAmdJvEhMv4mKAwCL/RYnBUsBUEm9RQFEMQBPAkxQJwhMUEm9RQEUREsBvkQyB0sBIltLAQ1EMQAiKGVEE0SL/zgIJA9Ei/84BzIKEkQxACInBGVEcABIIitlRA9EFksBgRBbIwhLAoEYW4v+CEwWTwNMXBBMFlwYTgK/SwG8SL+JigIBi/4Wi/9QJwhMUL1FAYmKAQGL/xYnBUxQvkSJ",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}