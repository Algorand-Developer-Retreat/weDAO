{
    "hints": {
        "createApplication(bool,uint64,uint64,string,string)void": {
            "call_config": {
                "no_op": "CREATE"
            }
        },
        "configureContract(bool,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "createProposal(string,string,uint64,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "voteProposal(uint64,bool,pay)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "hasVoted(uint64,account)bool": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "ProposalDataType",
                    "elements": [
                        [
                            "proposal_expiry_timestamp",
                            "uint64"
                        ],
                        [
                            "proposal_start_timestamp",
                            "uint64"
                        ],
                        [
                            "proposal_total_votes",
                            "uint64"
                        ],
                        [
                            "proposal_yes_votes",
                            "uint64"
                        ],
                        [
                            "proposal_creator",
                            "address"
                        ],
                        [
                            "proposal_title_and_description",
                            "string"
                        ]
                    ]
                }
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 2,
            "num_uints": 4
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "anyone_can_create": {
                    "type": "uint64",
                    "key": "anyone_can_create"
                },
                "asset_id": {
                    "type": "uint64",
                    "key": "asset_id"
                },
                "manager_address": {
                    "type": "bytes",
                    "key": "manager_address"
                },
                "minimum_holding": {
                    "type": "uint64",
                    "key": "minimum_holding"
                },
                "project_name": {
                    "type": "bytes",
                    "key": "project_name"
                },
                "proposal_count": {
                    "type": "uint64",
                    "key": "proposal_count"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "YesNoDao",
        "methods": [
            {
                "name": "createApplication",
                "args": [
                    {
                        "type": "bool",
                        "name": "anyone_can_create"
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_holding"
                    },
                    {
                        "type": "uint64",
                        "name": "asset_id"
                    },
                    {
                        "type": "string",
                        "name": "projectTitle"
                    },
                    {
                        "type": "string",
                        "name": "projectDescription"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "configureContract",
                "args": [
                    {
                        "type": "bool",
                        "name": "anyone_can_create"
                    },
                    {
                        "type": "uint64",
                        "name": "minimum_holding"
                    },
                    {
                        "type": "uint64",
                        "name": "assetId"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "createProposal",
                "args": [
                    {
                        "type": "string",
                        "name": "proposal_title"
                    },
                    {
                        "type": "string",
                        "name": "proposal_description"
                    },
                    {
                        "type": "uint64",
                        "name": "expires_in"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "voteProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id"
                    },
                    {
                        "type": "bool",
                        "name": "vote"
                    },
                    {
                        "type": "pay",
                        "name": "mbr_txn"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                }
            },
            {
                "name": "hasVoted",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id"
                    },
                    {
                        "type": "account",
                        "name": "voter"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "bool"
                }
            },
            {
                "name": "getProposal",
                "args": [
                    {
                        "type": "uint64",
                        "name": "proposal_id"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,address,string)"
                }
            }
        ],
        "networks": {}
    },
    "bare_call_config": {}
}