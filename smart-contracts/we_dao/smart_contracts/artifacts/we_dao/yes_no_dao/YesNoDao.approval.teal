#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 16490
    bytecblock "manager_address" "proposal_count" "anyone_can_create" "minimum_holding" "asset_id" "_p" 0x151f7c75 0x0000000000000000 "_v"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txn NumAppArgs
    bz main_after_if_else@12
    pushbytess 0x07f28a11 0x21b89dde 0xef0ffc68 0x6b509907 0x97d5cecd 0xf812fd3d // method "createApplication(bool,uint64,uint64,string,string)void", method "configureContract(bool,uint64,uint64)void", method "createProposal(string,string,uint64,pay)void", method "voteProposal(uint64,bool,pay)void", method "hasVoted(uint64,account)bool", method "getProposal(uint64)(uint64,uint64,uint64,uint64,address,string)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_configureContract_route@4 main_createProposal_route@5 main_voteProposal_route@6 main_hasVoted_route@7 main_getProposal_route@8

main_after_if_else@12:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    intc_0 // 0
    return

main_getProposal_route@8:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:216
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:216
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    callsub getProposal
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_hasVoted_route@7:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:206
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    btoi
    txnas Accounts
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:206
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    callsub hasVoted
    pushbytes 0x00
    intc_0 // 0
    uncover 2
    setbit
    bytec 6 // 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_voteProposal_route@6:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:146
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:146
    // @abimethod({ allowActions: 'NoOp' })
    callsub voteProposal
    intc_1 // 1
    return

main_createProposal_route@5:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:99
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:99
    // @abimethod({ allowActions: 'NoOp' })
    callsub createProposal
    intc_1 // 1
    return

main_configureContract_route@4:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:71
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:71
    // @abimethod({ allowActions: 'NoOp' })
    callsub configureContract
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:43
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:18
    // export class YesNoDao extends Contract {
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    txna ApplicationArgs 4
    extract 2 0
    txna ApplicationArgs 5
    extract 2 0
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:43
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createApplication(anyoneCanCreate: uint64, minimumHolding: uint64, assetId: uint64, projectName: bytes, projectDesription: bytes) -> void:
createApplication:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:43-50
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(
    //   anyoneCanCreate: boolean,
    //   minimumHolding: uint64,
    //   assetId: uint64,
    //   projectName: string,
    //   projectDesription: string,
    // ): void {
    proto 5 0
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:20
    // manager_address = GlobalState<Account>()
    bytec_0 // "manager_address"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:52
    // this.manager_address.value = Txn.sender
    txn Sender
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:23
    // proposal_count = GlobalState<uint64>()
    bytec_1 // "proposal_count"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:55
    // this.proposal_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:26
    // anyone_can_create = GlobalState<boolean>()
    bytec_2 // "anyone_can_create"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:58
    // this.anyone_can_create.value = anyoneCanCreate
    frame_dig -5
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:35
    // minimum_holding = GlobalState<uint64>()
    bytec_3 // "minimum_holding"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:60
    // this.minimum_holding.value = minimumHolding
    frame_dig -4
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:32
    // project_name = GlobalState<string>()
    pushbytes "project_name"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:63
    // this.project_name.value = projectName
    frame_dig -2
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:29
    // asset_id = GlobalState<uint64>()
    bytec 4 // "asset_id"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:66
    // this.asset_id.value = assetId
    frame_dig -3
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:86-96
    // itxn
    //   .applicationCall({
    //     appId: 1025,
    //     appArgs: [
    //       arc4.methodSelector('createNewProject(string,string)void'),
    //       new arc4.Str(projectTitle),
    //       new arc4.Str(projectDesription),
    //     ],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:91
    // new arc4.Str(projectTitle),
    frame_dig -2
    len
    itob
    extract 6 2
    frame_dig -2
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:92
    // new arc4.Str(projectDesription),
    frame_dig -1
    len
    itob
    extract 6 2
    frame_dig -1
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:90
    // arc4.methodSelector('createNewProject(string,string)void'),
    pushbytes 0xeb03c927 // method "createNewProject(string,string)void"
    itxn_field ApplicationArgs
    swap
    itxn_field ApplicationArgs
    itxn_field ApplicationArgs
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:88
    // appId: 1025,
    pushint 1025 // 1025
    itxn_field ApplicationID
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:86-95
    // itxn
    //   .applicationCall({
    //     appId: 1025,
    //     appArgs: [
    //       arc4.methodSelector('createNewProject(string,string)void'),
    //       new arc4.Str(projectTitle),
    //       new arc4.Str(projectDesription),
    //     ],
    //     fee: 0,
    //   })
    pushint 6 // 6
    itxn_field TypeEnum
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:94
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:86-96
    // itxn
    //   .applicationCall({
    //     appId: 1025,
    //     appArgs: [
    //       arc4.methodSelector('createNewProject(string,string)void'),
    //       new arc4.Str(projectTitle),
    //       new arc4.Str(projectDesription),
    //     ],
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.configureContract(anyone_can_create: uint64, minimum_holding: uint64, assetId: uint64) -> void:
configureContract:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:71-72
    // @abimethod({ allowActions: 'NoOp' })
    // public configureContract(anyone_can_create: boolean, minimum_holding: uint64, assetId: uint64): void {
    proto 3 0
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:20
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:74
    // assert(this.manager_address.value === Txn.sender, 'Only the manager can configure the contract')
    txn Sender
    ==
    assert // Only the manager can configure the contract
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:26
    // anyone_can_create = GlobalState<boolean>()
    bytec_2 // "anyone_can_create"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:76
    // this.anyone_can_create.value = anyone_can_create
    frame_dig -3
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:35
    // minimum_holding = GlobalState<uint64>()
    bytec_3 // "minimum_holding"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:79
    // this.minimum_holding.value = minimum_holding
    frame_dig -2
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:29
    // asset_id = GlobalState<uint64>()
    bytec 4 // "asset_id"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:82
    // this.asset_id.value = assetId
    frame_dig -1
    app_global_put
    retsub


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.createProposal(proposal_title: bytes, proposal_description: bytes, expires_in: uint64, mbr_txn: uint64) -> void:
createProposal:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:99-105
    // @abimethod({ allowActions: 'NoOp' })
    // public createProposal(
    //   proposal_title: string,
    //   proposal_description: string,
    //   expires_in: uint64,
    //   mbr_txn: gtxn.PaymentTxn,
    // ): void {
    proto 4 0
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:26
    // anyone_can_create = GlobalState<boolean>()
    intc_0 // 0
    bytec_2 // "anyone_can_create"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:106
    // if (this.anyone_can_create.value === false) {
    bnz createProposal_after_if_else@2
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:20
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:107
    // assert(this.manager_address.value === Txn.sender, 'Only the manager can create proposals')
    txn Sender
    ==
    assert // Only the manager can create proposals

createProposal_after_if_else@2:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:111
    // const currentTimestamp: uint64 = op.Global.latestTimestamp
    global LatestTimestamp
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:115
    // assert(mbr_txn.amount >= 16490, 'Payment must cover the box MBR')
    frame_dig -1
    gtxns Amount
    intc_2 // 16490
    >=
    assert // Payment must cover the box MBR
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:118
    // assert(mbr_txn.receiver === op.Global.currentApplicationAddress, 'Payment must be to the contract')
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to the contract
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:121
    // const proposal_expiry_timestamp: uint64 = currentTimestamp + expires_in
    dup
    frame_dig -2
    +
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:124
    // proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:125
    // proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    swap
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:128
    // proposal_creator: new arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:129
    // proposal_title_and_description: new arc4.Str(proposal_title + ':' + proposal_description),
    frame_dig -4
    pushbytes ":"
    concat
    frame_dig -3
    concat
    dup
    len
    itob
    extract 6 2
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:123-130
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_creator: new arc4.Address(Txn.sender),
    //   proposal_title_and_description: new arc4.Str(proposal_title + ':' + proposal_description),
    // })
    uncover 3
    uncover 3
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:126
    // proposal_total_votes: new arc4.UintN64(0),
    bytec 7 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:123-130
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_creator: new arc4.Address(Txn.sender),
    //   proposal_title_and_description: new arc4.Str(proposal_title + ':' + proposal_description),
    // })
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:127
    // proposal_yes_votes: new arc4.UintN64(0),
    bytec 7 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:123-130
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_creator: new arc4.Address(Txn.sender),
    //   proposal_title_and_description: new arc4.Str(proposal_title + ':' + proposal_description),
    // })
    concat
    uncover 2
    concat
    pushbytes 0x0042
    concat
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:23
    // proposal_count = GlobalState<uint64>()
    intc_0 // 0
    bytec_1 // "proposal_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:133
    // const newProposalNonce = Uint64(this.proposal_count.value + 1)
    intc_1 // 1
    +
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:136
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:38
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec 5 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:136
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    box_len
    bury 1
    !
    assert // Proposal already exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:23
    // proposal_count = GlobalState<uint64>()
    bytec_1 // "proposal_count"
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:139
    // this.proposal_count.value = newProposalNonce
    uncover 2
    app_global_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:142
    // this.proposal(new arc4.UintN64(newProposalNonce)).value = proposal.copy()
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.voteProposal(proposal_id: uint64, vote: uint64, mbr_txn: uint64) -> void:
voteProposal:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:146-147
    // @abimethod({ allowActions: 'NoOp' })
    // public voteProposal(proposal_id: uint64, vote: boolean, mbr_txn: gtxn.PaymentTxn): void {
    proto 3 0
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:150
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    frame_dig -3
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:38
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec 5 // "_p"
    dig 1
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:150
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    dup
    box_len
    bury 1
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:149-152
    // assert(
    //   this.proposal(new arc4.UintN64(proposal_id)).exists,
    //   'The proposal the user is trying to vote on does not exist',
    // )
    assert // The proposal the user is trying to vote on does not exist
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:157
    // voter_address: new arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:155-158
    // const voteId = new VoteIdType({
    //   proposal_id: new arc4.UintN64(proposal_id),
    //   voter_address: new arc4.Address(Txn.sender),
    // })
    uncover 2
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:41
    // vote = BoxMap<VoteIdType, VoteDataType>({ keyPrefix: '_v' })
    bytec 8 // "_v"
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:161
    // assert(!this.vote(voteId).exists, 'The user has already voted on this proposal')
    dup
    box_len
    bury 1
    !
    assert // The user has already voted on this proposal
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:164
    // const currentProposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    dig 1
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:167
    // const currentTime = op.Global.latestTimestamp
    global LatestTimestamp
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:168
    // const expiryTime = currentProposal.proposal_expiry_timestamp.native
    dig 1
    intc_0 // 0
    extract_uint64
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:169
    // assert(currentTime < expiryTime, 'The proposal has expired')
    dig 1
    >
    assert // The proposal has expired
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:172
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    txn Sender
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:20
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:172
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    !=
    assert // The manager cannot vote on proposals
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:175
    // assert(mbr_txn.amount >= 16490, 'Payment must cover the vote box MBR')
    frame_dig -1
    gtxns Amount
    intc_2 // 16490
    >=
    assert // Payment must cover the vote box MBR
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:178
    // assert(mbr_txn.receiver === op.Global.currentApplicationAddress, 'Payment must be to the contract')
    frame_dig -1
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to the contract
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:181
    // const [assetBalance, hasAsset] = op.AssetHolding.assetBalance(Txn.sender, this.asset_id.value)
    txn Sender
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:29
    // asset_id = GlobalState<uint64>()
    intc_0 // 0
    bytec 4 // "asset_id"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:181
    // const [assetBalance, hasAsset] = op.AssetHolding.assetBalance(Txn.sender, this.asset_id.value)
    asset_holding_get AssetBalance
    pop
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:35
    // minimum_holding = GlobalState<uint64>()
    intc_0 // 0
    bytec_3 // "minimum_holding"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:183
    // assert(assetBalance >= this.minimum_holding.value, 'The user does not have enough asset to vote')
    >=
    assert // The user does not have enough asset to vote
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:187
    // vote_timestamp: new arc4.UintN64(currentTime),
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:191
    // const updatedVotes = Uint64(currentProposal.proposal_total_votes.native + 1)
    dig 1
    pushint 16 // 16
    extract_uint64
    intc_1 // 1
    +
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:192
    // const updatedYesVotes = Uint64(currentProposal.proposal_yes_votes.native + (vote ? 1 : 0))
    dig 2
    pushint 24 // 24
    extract_uint64
    frame_dig -2
    +
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:196
    // updatedProposal.proposal_total_votes = new arc4.UintN64(updatedVotes)
    swap
    itob
    uncover 3
    swap
    replace2 16
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:197
    // updatedProposal.proposal_yes_votes = new arc4.UintN64(updatedYesVotes)
    swap
    itob
    replace2 24
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:200
    // this.vote(voteId).value = voteData.copy()
    cover 2
    box_put
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:202
    // this.proposal(new arc4.UintN64(proposal_id)).value = updatedProposal.copy()
    dig 1
    box_del
    pop
    box_put
    retsub


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.hasVoted(proposal_id: uint64, voter: bytes) -> uint64:
hasVoted:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:206-207
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    // public hasVoted(proposal_id: uint64, voter: Account): boolean {
    proto 2 1
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:209
    // proposal_id: new arc4.UintN64(proposal_id),
    frame_dig -2
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:208-211
    // const voteId = new VoteIdType({
    //   proposal_id: new arc4.UintN64(proposal_id),
    //   voter_address: new arc4.Address(voter),
    // })
    frame_dig -1
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:41
    // vote = BoxMap<VoteIdType, VoteDataType>({ keyPrefix: '_v' })
    bytec 8 // "_v"
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:213
    // return this.vote(voteId).exists
    box_len
    bury 1
    retsub


// smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts::YesNoDao.getProposal(proposal_id: uint64) -> bytes:
getProposal:
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:216-217
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    // public getProposal(proposal_id: uint64): ProposalDataType {
    proto 1 1
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:218
    // const proposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    frame_dig -1
    itob
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:38
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec 5 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:218
    // const proposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_dao/YesNoContract.algo.ts:219
    // return proposal
    retsub
