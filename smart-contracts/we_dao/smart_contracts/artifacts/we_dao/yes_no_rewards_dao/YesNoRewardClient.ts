/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"YesNoReward","structs":{"ProposalDataType":[{"name":"proposalTitle","type":"string"},{"name":"proposalDescription","type":"string"},{"name":"proposalExpiryTimestamp","type":"uint64"},{"name":"proposalStartTimestamp","type":"uint64"},{"name":"proposalTotalVotes","type":"uint64"},{"name":"proposalYesVotes","type":"uint64"},{"name":"proposalPrizePool","type":"uint64"},{"name":"proposalAsset","type":"uint64"},{"name":"votePrice","type":"uint64"}],"VoteDataType":[{"name":"voteTimestamp","type":"uint64"},{"name":"claimed","type":"bool"}]},"methods":[{"name":"createApplication","args":[{"type":"bool","name":"anyone_can_create"}],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"createProposal","args":[{"type":"string","name":"proposal_title"},{"type":"string","name":"proposal_description"},{"type":"uint64","name":"expires_in"},{"type":"pay","name":"mbr_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"voteProposal","args":[{"type":"uint64","name":"proposal_id"},{"type":"bool","name":"vote"},{"type":"pay","name":"mbr_txn"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"hasVoted","args":[{"type":"uint64","name":"proposal_id"},{"type":"account","name":"voter"}],"returns":{"type":"bool"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}},{"name":"getProposal","args":[{"type":"uint64","name":"proposal_id"}],"returns":{"type":"(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)","struct":"ProposalDataType"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":2,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"bWFuYWdlcl9hZGRyZXNz"},"proposal_count":{"keyType":"AVMString","valueType":"AVMUint64","key":"cHJvcG9zYWxfY291bnQ="},"anyone_can_create":{"keyType":"AVMString","valueType":"AVMUint64","key":"YW55b25lX2Nhbl9jcmVhdGU="}},"local":{},"box":{"proposal":{"keyType":"AVMString","valueType":"ProposalDataType","key":"X3A="},"vote":{"keyType":"AVMString","valueType":"VoteDataType","key":"X3Y="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[431,535],"errorMessage":"Box must have value"},{"pc":[128,149,183,214,252],"errorMessage":"OnCompletion is not NoOp"},{"pc":[301],"errorMessage":"Only the manager can create proposals"},{"pc":[467],"errorMessage":"Payment must be to the contract"},{"pc":[459],"errorMessage":"Payment must cover the vote box MBR"},{"pc":[386],"errorMessage":"Proposal already exists"},{"pc":[450],"errorMessage":"The manager cannot vote on proposals"},{"pc":[442],"errorMessage":"The proposal has expired"},{"pc":[411],"errorMessage":"The proposal the user is trying to vote on does not exist"},{"pc":[427],"errorMessage":"The user has already voted on this proposal"},{"pc":[256],"errorMessage":"can only call when creating"},{"pc":[131,152,186,217],"errorMessage":"can only call when not creating"},{"pc":[290,297,373,448],"errorMessage":"check GlobalState exists"},{"pc":[205,243],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAQAmBwgAAAAAAAAAAA9tYW5hZ2VyX2FkZHJlc3MOcHJvcG9zYWxfY291bnQCX3AEFR98dRFhbnlvbmVfY2FuX2NyZWF0ZQJfdjEbQQAqggUEy0q/tQTvD/xoBGtQmQcEl9XOzQQenns6NhoAjgUAfgBYADkAFwACI0MxGRREMRhENhoBF4gBgicETFCwIkMxGRREMRhENhoBFzYaAhfAHIgBVoABACNPAlQnBExQsCJDMRkURDEYRDYaARc2GgIjUzEWIglJOBAiEkSIALwiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgMXMRYiCUk4ECISRIgAJCJDMRkURDEYFEQ2GgEjU4gAAiJDigEAKTEAZyojZycFi/9niYoEACMnBWVEQAAIIyllRDEAEkQyB0mL/giL/BUWVwYCi/xQi/0VFlcGAov9UE8CFk8DFksDFYE8CBZXBgKAAgA8TFBPAlBMUChQKFAoUChQKFBPAlBMUCMqZUQiCEkWK0xQSb1FARREKk8CZ0m8SEy/iYoDAIv9FitLAVBJvUUBRDEATwJMUCcGTFBJvUUBFERLAb5EMgdLAYEEW0sBDUQxACMpZUQTRIv/OAiBmnEPRIv/OAcyChJEFoABAFBLAYEUWyIISwKBHFuL/ghMFk8DTFwUTBZcHE4Cv0sBvEi/iYoCAYv+Fov/UCcGTFC9RQGJigEBi/8WK0xQvkSJ","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProposalDataType = {
  proposalTitle: string,
  proposalDescription: string,
  proposalExpiryTimestamp: bigint,
  proposalStartTimestamp: bigint,
  proposalTotalVotes: bigint,
  proposalYesVotes: bigint,
  proposalPrizePool: bigint,
  proposalAsset: bigint,
  votePrice: bigint
}


/**
 * Converts the ABI tuple representation of a ProposalDataType to the struct representation
 */
export function ProposalDataTypeFromTuple(abiTuple: [string, string, bigint, bigint, bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProposalDataType, APP_SPEC.structs) as ProposalDataType
}

export type VoteDataType = {
  voteTimestamp: bigint,
  claimed: boolean
}


/**
 * Converts the ABI tuple representation of a VoteDataType to the struct representation
 */
export function VoteDataTypeFromTuple(abiTuple: [bigint, boolean]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.VoteDataType, APP_SPEC.structs) as VoteDataType
}

/**
 * The argument types for the YesNoReward contract
 */
export type YesNoRewardArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication(bool)void': {
      anyoneCanCreate: boolean
    }
    'createProposal(string,string,uint64,pay)void': {
      proposalTitle: string
      proposalDescription: string
      expiresIn: bigint | number
      mbrTxn: AppMethodCallTransactionArgument
    }
    'voteProposal(uint64,bool,pay)void': {
      proposalId: bigint | number
      vote: boolean
      mbrTxn: AppMethodCallTransactionArgument
    }
    'hasVoted(uint64,account)bool': {
      proposalId: bigint | number
      voter: Uint8Array | string
    }
    'getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': {
      proposalId: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication(bool)void': [anyoneCanCreate: boolean]
    'createProposal(string,string,uint64,pay)void': [proposalTitle: string, proposalDescription: string, expiresIn: bigint | number, mbrTxn: AppMethodCallTransactionArgument]
    'voteProposal(uint64,bool,pay)void': [proposalId: bigint | number, vote: boolean, mbrTxn: AppMethodCallTransactionArgument]
    'hasVoted(uint64,account)bool': [proposalId: bigint | number, voter: Uint8Array | string]
    'getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': [proposalId: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type YesNoRewardReturns = {
  'createApplication(bool)void': void
  'createProposal(string,string,uint64,pay)void': void
  'voteProposal(uint64,bool,pay)void': void
  'hasVoted(uint64,account)bool': boolean
  'getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)': ProposalDataType
}

/**
 * Defines the types of available calls and state of the YesNoReward smart contract.
 */
export type YesNoRewardTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication(bool)void' | 'createApplication', {
      argsObj: YesNoRewardArgs['obj']['createApplication(bool)void']
      argsTuple: YesNoRewardArgs['tuple']['createApplication(bool)void']
      returns: YesNoRewardReturns['createApplication(bool)void']
    }>
    & Record<'createProposal(string,string,uint64,pay)void' | 'createProposal', {
      argsObj: YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void']
      argsTuple: YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']
      returns: YesNoRewardReturns['createProposal(string,string,uint64,pay)void']
    }>
    & Record<'voteProposal(uint64,bool,pay)void' | 'voteProposal', {
      argsObj: YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void']
      argsTuple: YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']
      returns: YesNoRewardReturns['voteProposal(uint64,bool,pay)void']
    }>
    & Record<'hasVoted(uint64,account)bool' | 'hasVoted', {
      argsObj: YesNoRewardArgs['obj']['hasVoted(uint64,account)bool']
      argsTuple: YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']
      returns: YesNoRewardReturns['hasVoted(uint64,account)bool']
    }>
    & Record<'getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' | 'getProposal', {
      argsObj: YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      argsTuple: YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
      returns: YesNoRewardReturns['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: BinaryState
        proposalCount: bigint
        anyoneCanCreate: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        proposal: ProposalDataType
        vote: VoteDataType
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type YesNoRewardSignatures = keyof YesNoRewardTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type YesNoRewardNonVoidMethodSignatures = keyof YesNoRewardTypes['methods'] extends infer T ? T extends keyof YesNoRewardTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the YesNoReward smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends YesNoRewardSignatures> = YesNoRewardTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the YesNoReward smart contract to the method's return type
 */
export type MethodReturn<TSignature extends YesNoRewardSignatures> = YesNoRewardTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = YesNoRewardTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = YesNoRewardTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type YesNoRewardCreateCallParams =
  | Expand<CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & {method: 'createApplication(bool)void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type YesNoRewardDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: YesNoRewardCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the YesNoReward smart contract
 */
export abstract class YesNoRewardParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends YesNoRewardCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication(bool)void':
            return YesNoRewardParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the YesNoReward smart contract using the createApplication(bool)void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication(bool)void' as const,
          args: Array.isArray(params.args) ? params.args : [params.args.anyoneCanCreate],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createProposal(string,string,uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createProposal(params: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createProposal(string,string,uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalTitle, params.args.proposalDescription, params.args.expiresIn, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the voteProposal(uint64,bool,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static voteProposal(params: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'voteProposal(uint64,bool,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.vote, params.args.mbrTxn],
    }
  }
  /**
   * Constructs a no op call for the hasVoted(uint64,account)bool ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static hasVoted(params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'hasVoted(uint64,account)bool' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId, params.args.voter],
    }
  }
  /**
   * Constructs a no op call for the getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getProposal(params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.proposalId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the YesNoReward smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class YesNoRewardFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `YesNoRewardFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new YesNoRewardClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new YesNoRewardClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the YesNoReward smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: YesNoRewardDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? YesNoRewardParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (YesNoRewardCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new YesNoRewardClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoReward smart contract using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.params.create(YesNoRewardParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoReward smart contract using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        return this.appFactory.createTransaction.create(YesNoRewardParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the YesNoReward smart contract using an ABI method call using the createApplication(bool)void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<YesNoRewardArgs['obj']['createApplication(bool)void'] | YesNoRewardArgs['tuple']['createApplication(bool)void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
        const result = await this.appFactory.send.create(YesNoRewardParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | YesNoRewardReturns['createApplication(bool)void']) }, appClient: new YesNoRewardClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the YesNoReward smart contract
 */
export class YesNoRewardClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `YesNoRewardClient`
   *
   * @param appClient An `AppClient` instance which has been created with the YesNoReward app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `YesNoRewardClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends YesNoRewardNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `YesNoRewardClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<YesNoRewardClient> {
    return new YesNoRewardClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `YesNoRewardClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<YesNoRewardClient> {
    return new YesNoRewardClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoReward smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createProposal: (params: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YesNoRewardParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    voteProposal: (params: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YesNoRewardParamsFactory.voteProposal(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `hasVoted(uint64,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    hasVoted: (params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YesNoRewardParamsFactory.hasVoted(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getProposal: (params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(YesNoRewardParamsFactory.getProposal(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoReward smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createProposal: (params: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YesNoRewardParamsFactory.createProposal(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    voteProposal: (params: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YesNoRewardParamsFactory.voteProposal(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `hasVoted(uint64,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    hasVoted: (params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YesNoRewardParamsFactory.hasVoted(params))
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getProposal: (params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(YesNoRewardParamsFactory.getProposal(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the YesNoReward smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `createProposal(string,string,uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createProposal: async (params: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YesNoRewardParamsFactory.createProposal(params))
      return {...result, return: result.return as unknown as (undefined | YesNoRewardReturns['createProposal(string,string,uint64,pay)void'])}
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `voteProposal(uint64,bool,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    voteProposal: async (params: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YesNoRewardParamsFactory.voteProposal(params))
      return {...result, return: result.return as unknown as (undefined | YesNoRewardReturns['voteProposal(uint64,bool,pay)void'])}
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `hasVoted(uint64,account)bool` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    hasVoted: async (params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YesNoRewardParamsFactory.hasVoted(params))
      return {...result, return: result.return as unknown as (undefined | YesNoRewardReturns['hasVoted(uint64,account)bool'])}
    },

    /**
     * Makes a call to the YesNoReward smart contract using the `getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getProposal: async (params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(YesNoRewardParamsFactory.getProposal(params))
      return {...result, return: result.return as unknown as (undefined | YesNoRewardReturns['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new YesNoRewardClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the YesNoReward smart contract using the `hasVoted(uint64,account)bool` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async hasVoted(params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']>) {
    const result = await this.appClient.send.call(YesNoRewardParamsFactory.hasVoted(params))
    return result.return as unknown as YesNoRewardReturns['hasVoted(uint64,account)bool']
  }

  /**
   * Makes a readonly (simulated) call to the YesNoReward smart contract using the `getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getProposal(params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>) {
    const result = await this.appClient.send.call(YesNoRewardParamsFactory.getProposal(params))
    return result.return as unknown as YesNoRewardReturns['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']
  }

  /**
   * Methods to access state for the current YesNoReward app
   */
  state = {
    /**
     * Methods to access global state for the current YesNoReward app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: new BinaryStateValue(result.manager_address),
          proposalCount: result.proposal_count,
          anyoneCanCreate: result.anyone_can_create,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the proposal_count key in global state
       */
      proposalCount: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("proposal_count")) as bigint | undefined },
      /**
       * Get the current value of the anyone_can_create key in global state
       */
      anyoneCanCreate: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("anyone_can_create")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current YesNoReward app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          proposal: result.proposal,
          vote: result.vote,
        }
      },
      /**
       * Get the current value of the proposal key in box state
       */
      proposal: async (): Promise<ProposalDataType | undefined> => { return (await this.appClient.state.box.getValue("proposal")) as ProposalDataType | undefined },
      /**
       * Get the current value of the vote key in box state
       */
      vote: async (): Promise<VoteDataType | undefined> => { return (await this.appClient.state.box.getValue("vote")) as VoteDataType | undefined },
    },
  }

  public newGroup(): YesNoRewardComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createProposal(string,string,uint64,pay)void method call against the YesNoReward contract
       */
      createProposal(params: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a voteProposal(uint64,bool,pay)void method call against the YesNoReward contract
       */
      voteProposal(params: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.voteProposal(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a hasVoted(uint64,account)bool method call against the YesNoReward contract
       */
      hasVoted(params: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.hasVoted(params)))
        resultMappers.push((v) => client.decodeReturnValue('hasVoted(uint64,account)bool', v))
        return this
      },
      /**
       * Add a getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64) method call against the YesNoReward contract
       */
      getProposal(params: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getProposal(params)))
        resultMappers.push((v) => client.decodeReturnValue('getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a clear state call to the YesNoReward contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as YesNoRewardComposer
  }
}
export type YesNoRewardComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createProposal(string,string,uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createProposal(params?: CallParams<YesNoRewardArgs['obj']['createProposal(string,string,uint64,pay)void'] | YesNoRewardArgs['tuple']['createProposal(string,string,uint64,pay)void']>): YesNoRewardComposer<[...TReturns, YesNoRewardReturns['createProposal(string,string,uint64,pay)void'] | undefined]>

  /**
   * Calls the voteProposal(uint64,bool,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  voteProposal(params?: CallParams<YesNoRewardArgs['obj']['voteProposal(uint64,bool,pay)void'] | YesNoRewardArgs['tuple']['voteProposal(uint64,bool,pay)void']>): YesNoRewardComposer<[...TReturns, YesNoRewardReturns['voteProposal(uint64,bool,pay)void'] | undefined]>

  /**
   * Calls the hasVoted(uint64,account)bool ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  hasVoted(params?: CallParams<YesNoRewardArgs['obj']['hasVoted(uint64,account)bool'] | YesNoRewardArgs['tuple']['hasVoted(uint64,account)bool']>): YesNoRewardComposer<[...TReturns, YesNoRewardReturns['hasVoted(uint64,account)bool'] | undefined]>

  /**
   * Calls the getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getProposal(params?: CallParams<YesNoRewardArgs['obj']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | YesNoRewardArgs['tuple']['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)']>): YesNoRewardComposer<[...TReturns, YesNoRewardReturns['getProposal(uint64)(string,string,uint64,uint64,uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the YesNoReward smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): YesNoRewardComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): YesNoRewardComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<YesNoRewardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<YesNoRewardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<YesNoRewardComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<YesNoRewardComposerResults<TReturns>>
}
export type YesNoRewardComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

