{
  "version": 3,
  "sources": [
    "/Users/kierannelson/Development/weDAO/smart-contracts/we_dao/smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AAmOG;;AAAA;AAAA;AAAA;;AAAA;AAnOH;;;AAAA;AAmOG;;;AAAA;;;;;;AAAA;AAAA;AAAA;AAAA;;AA3CD;;AAAA;AAAA;AAAA;;AAAA;AAxLF;;;AAAA;AAwLE;;;AAAA;;AArFC;;AAAA;AAAA;AAAA;;AAAA;AAnGH;;;AAAA;AAAA;;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAmGG;;;AAAA;;AAlDA;;AAAA;AAAA;AAAA;;AAAA;AAjDH;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAiDG;;;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApCH;;;AAAA;AAoCG;;;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AA5BH;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AA4BG;;;AAAA;;AAZA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAhBH;;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAgBG;;;AAAA;;AAAD;;;AAdA;AAiBmC;;AAAjC;AAdF;AAiB8B;AAA5B;AAdF;AAiBE;;AAAA;;AAGF;;;AA1BA;AAAA;AAAA;AAAA;AA6B4C;;AAAnC;AAAP;AAvBF;AAyBE;;AAAA;;AAGF;;;AAEE;AAE6B;;AACP;AAEL;;;;;;;;;;;AALjB;;;AAMS;;;AANT;;AAWF;;;AAzCA;AAAA;AAAA;AAAA;AAkDE;;;AAxDF;AAAA;AAAA;AAAA;AAyD8C;;AAAnC;AAAP;AAKI;;AAAgC;;AAChC;;AAAyC;;AAGJ;;AAKrC;AAAA;;AAAoC;AAGb;AACD;AAAA;AAGV;;AAAA;AACK;;AAAA;AACT;;AAAA;AACI;;AAAA;AAAA;AAAA;;;AAAA;;AAAA;AARiB;;AAAA;;AAAA;AAGX;;AAHW;AAIb;;AAJa;AAAA;;AAAA;AAAA;;AAAA;AAAA;;AAAA;AAAA;;;;AAAA;AAAA;AAAA;AAtErC;AAAA;AAAA;AAAA;AAkF8D;AAA5B;AAGV;AAAA;AA/EyC;AAAA;AAAA;AA+EL;AAAA;AAAA;;AAAnD;AAAP;AArFF;AAwFE;;AAAA;AAGA;AAAA;;AAAA;AAAA;;AAGF;;;AASkB;;AAAA;AAjG+C;AAAA;;AAAA;AAiGhB;AAAA;AAAA;;AAD/C;AAQsC;;AAFvB;;AAAA;AAAA;AAnGoC;;AAAA;AAAA;AAyGzB;AAAA;AAAA;;AAAnB;AAAP;AAGuF;;AAAA;AAAA;AAIzE;;AAAA;;AAA2C;;AAAX;;AAAW;AAAvD;;AAAA;AADF;AAOc;;AAAA;;AAA4B;;AAAxC;AADF;AAM8B;;AACxB;;AAA6B;AAA0B;AACtD;;AAAA;AAAP;AAGW;;AA5Ib;AAAA;AAAA;AAAA;AA4IS;AAAP;AAGe;;AAAA;;AAAU;;;AAAlB;AAAP;AAGe;;AAAA;;AAAuB;;AAA/B;AAAP;AAIkB;AACP;;;AAFM;AAOgD;;AAArB;;AAAqB;AAAS;AAA9C;AACsC;;AAAnB;;AAAmB;AAA5D;;AAAyB;AACqC;;AAApB;;AAAoB;AAA9D;;AAA0B;AAIO;;AAAA;AAAvC;;AAAA;AAAA;;AACqC;;AAAA;AAArC;;AACsC;AAAA;AAAtC;;AAEA;;AAAA;AAEA;;AAAA;;AAAA;;AAcF;;;AAIwC;;AAAA;AAjLyB;AAAA;;AAAA;AAiLM;AAAA;AAAA;AAWpC;;AAxBlB;;AAAA;AAAA;AAjKoC;;AAAA;AAAA;AAsK1B;AAAA;;AAkBzB;AAOsC;AAApB;;AAAoB;AAA8C;;AAArB;;AAAqB;AAD9E;;AAAA;AACJ;AAKF;AAEuB;;AACD;;AACwB;;AAAf;;AAAe;;;;;;;;;;;AAJ9C;;;AAMS;;;AANT;AAYuD;AAAjB;AAAtC;;AAEA;;AAAA;;AAAA;;AAGF;;;AAEmD;;AAAA;AA1Nc;AAAA;AAAA;AA0NiB;AAAA;AAChF",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 2"
    },
    "7": {
      "op": "bytecblock \"manager_address\" \"_p\" \"proposal_count\" \"anyone_can_create\" 0x0000000000000000 \"_v\""
    },
    "73": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "75": {
      "op": "bz main_after_if_else@13",
      "stack_out": []
    },
    "78": {
      "op": "pushbytess 0xf15e53b2 0x21b89dde 0x6fe9af85 0x4c5cc3f4 0xcc8ccc3d 0x00908f40 0xee56fbc2 // method \"createApplication(bool,uint64,uint64)void\", method \"configureContract(bool,uint64,uint64)void\", method \"optInToAsset(uint64)void\", method \"createProposal(string,string,uint64,axfer,uint64,pay)void\", method \"voteProposal(uint64,bool,pay,axfer)void\", method \"claimParticipationReward(uint64)void\", method \"getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)\"",
      "defined_out": [
        "Method(claimParticipationReward(uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,axfer,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string))",
        "Method(optInToAsset(uint64)void)",
        "Method(voteProposal(uint64,bool,pay,axfer)void)"
      ],
      "stack_out": [
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(optInToAsset(uint64)void)",
        "Method(createProposal(string,string,uint64,axfer,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay,axfer)void)",
        "Method(claimParticipationReward(uint64)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string))"
      ]
    },
    "115": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(claimParticipationReward(uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(createProposal(string,string,uint64,axfer,uint64,pay)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string))",
        "Method(optInToAsset(uint64)void)",
        "Method(voteProposal(uint64,bool,pay,axfer)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(createApplication(bool,uint64,uint64)void)",
        "Method(configureContract(bool,uint64,uint64)void)",
        "Method(optInToAsset(uint64)void)",
        "Method(createProposal(string,string,uint64,axfer,uint64,pay)void)",
        "Method(voteProposal(uint64,bool,pay,axfer)void)",
        "Method(claimParticipationReward(uint64)void)",
        "Method(getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string))",
        "tmp%2#0"
      ]
    },
    "118": {
      "op": "match main_createApplication_route@3 main_configureContract_route@4 main_optInToAsset_route@5 main_createProposal_route@6 main_voteProposal_route@7 main_claimParticipationReward_route@8 main_getProposal_route@9",
      "stack_out": []
    },
    "134": {
      "block": "main_after_if_else@13",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "135": {
      "op": "return",
      "stack_out": []
    },
    "136": {
      "block": "main_getProposal_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "138": {
      "op": "!",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "139": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "140": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "142": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "143": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%9#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%9#0"
      ]
    },
    "146": {
      "op": "btoi",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "147": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.getProposal",
      "op": "callsub getProposal",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "150": {
      "op": "pushbytes 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0",
        "0x151f7c75"
      ]
    },
    "156": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%52#0"
      ]
    },
    "157": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "158": {
      "op": "log",
      "stack_out": []
    },
    "159": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "160": {
      "op": "return",
      "stack_out": []
    },
    "161": {
      "block": "main_claimParticipationReward_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "163": {
      "op": "!",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "164": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "165": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "167": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "168": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%8#0"
      ]
    },
    "171": {
      "op": "btoi",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "172": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.claimParticipationReward",
      "op": "callsub claimParticipationReward",
      "stack_out": []
    },
    "175": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "176": {
      "op": "return",
      "stack_out": []
    },
    "177": {
      "block": "main_voteProposal_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "179": {
      "op": "!",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "180": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "181": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "183": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "184": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%7#0"
      ]
    },
    "187": {
      "op": "btoi",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "188": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%2#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "191": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%2#0",
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "reinterpret_bytes[1]%2#0",
        "0"
      ]
    },
    "192": {
      "op": "getbit",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0"
      ]
    },
    "193": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ]
    },
    "195": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "tmp%40#0",
        "2"
      ]
    },
    "196": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0"
      ]
    },
    "197": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%2#0 (copy)"
      ]
    },
    "198": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0"
      ]
    },
    "200": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_type%2#0",
        "pay"
      ]
    },
    "201": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_type_matches%2#0"
      ]
    },
    "202": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0"
      ]
    },
    "203": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%2#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "tmp%41#0"
      ]
    },
    "205": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%2#0",
        "tmp%38#0",
        "tmp%39#0",
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "tmp%41#0",
        "1"
      ]
    },
    "206": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "207": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_idx%3#0 (copy)"
      ]
    },
    "208": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0"
      ]
    },
    "210": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type%3#0",
        "axfer"
      ]
    },
    "211": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0",
        "tmp%38#0",
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0",
        "gtxn_type_matches%3#0"
      ]
    },
    "212": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%38#0",
        "tmp%39#0",
        "gtxn_idx%2#0",
        "gtxn_idx%3#0"
      ]
    },
    "213": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.voteProposal",
      "op": "callsub voteProposal",
      "stack_out": []
    },
    "216": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "217": {
      "op": "return",
      "stack_out": []
    },
    "218": {
      "block": "main_createProposal_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "220": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "221": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "222": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "224": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "225": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "228": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "231": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "234": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "237": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%5#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "240": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "241": {
      "op": "txn GroupIndex",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "243": {
      "op": "intc_3 // 2",
      "defined_out": [
        "2",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "2"
      ]
    },
    "244": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0"
      ]
    },
    "245": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "gtxn_idx%0#0 (copy)"
      ]
    },
    "246": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0"
      ]
    },
    "248": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "axfer",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "gtxn_type%0#0",
        "axfer"
      ]
    },
    "249": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "250": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0"
      ]
    },
    "251": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "254": {
      "op": "btoi",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0"
      ]
    },
    "255": {
      "op": "txn GroupIndex",
      "defined_out": [
        "gtxn_idx%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "257": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "gtxn_idx%0#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "tmp%33#0",
        "1"
      ]
    },
    "258": {
      "op": "-",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0"
      ]
    },
    "259": {
      "op": "dup",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_idx%1#0 (copy)"
      ]
    },
    "260": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0"
      ]
    },
    "262": {
      "op": "intc_1 // pay",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type%1#0",
        "pay"
      ]
    },
    "263": {
      "op": "==",
      "defined_out": [
        "gtxn_idx%0#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0",
        "gtxn_type_matches%1#0"
      ]
    },
    "264": {
      "error": "transaction type is pay",
      "op": "assert // transaction type is pay",
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "gtxn_idx%0#0",
        "tmp%32#0",
        "gtxn_idx%1#0"
      ]
    },
    "265": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createProposal",
      "op": "callsub createProposal",
      "stack_out": []
    },
    "268": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "269": {
      "op": "return",
      "stack_out": []
    },
    "270": {
      "block": "main_optInToAsset_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "272": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "273": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "274": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "276": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "277": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "280": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "281": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.optInToAsset",
      "op": "callsub optInToAsset",
      "stack_out": []
    },
    "284": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "285": {
      "op": "return",
      "stack_out": []
    },
    "286": {
      "block": "main_configureContract_route@4",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "288": {
      "op": "!",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "289": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "290": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "292": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "293": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "296": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0",
        "0"
      ]
    },
    "297": {
      "op": "getbit",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "298": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "301": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0"
      ]
    },
    "302": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%3#0",
        "tmp%14#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "305": {
      "op": "btoi",
      "defined_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "tmp%15#0",
        "tmp%16#0"
      ]
    },
    "306": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.configureContract",
      "op": "callsub configureContract",
      "stack_out": []
    },
    "309": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "310": {
      "op": "return",
      "stack_out": []
    },
    "311": {
      "block": "main_createApplication_route@3",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "313": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "314": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "315": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "317": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "318": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "322": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0",
        "0"
      ]
    },
    "323": {
      "op": "getbit",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "324": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "327": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "328": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "331": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "332": {
      "callsub": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createApplication",
      "op": "callsub createApplication",
      "stack_out": []
    },
    "335": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "336": {
      "op": "return",
      "stack_out": []
    },
    "337": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createApplication",
      "params": {
        "anyone_can_create#0": "uint64",
        "minimum_holding#0": "uint64",
        "asset_id#0": "uint64"
      },
      "block": "createApplication",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "340": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\""
      ],
      "stack_out": [
        "\"manager_address\""
      ]
    },
    "341": {
      "op": "txn Sender",
      "defined_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"manager_address\"",
        "new_state_value%0#0"
      ]
    },
    "343": {
      "op": "app_global_put",
      "stack_out": []
    },
    "344": {
      "op": "bytec_2 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\""
      ],
      "stack_out": [
        "\"proposal_count\""
      ]
    },
    "345": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"proposal_count\"",
        "0"
      ],
      "stack_out": [
        "\"proposal_count\"",
        "0"
      ]
    },
    "346": {
      "op": "app_global_put",
      "stack_out": []
    },
    "347": {
      "op": "bytec_3 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\""
      ],
      "stack_out": [
        "\"anyone_can_create\""
      ]
    },
    "348": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ],
      "stack_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ]
    },
    "350": {
      "op": "app_global_put",
      "stack_out": []
    },
    "351": {
      "retsub": true,
      "op": "retsub"
    },
    "352": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.configureContract",
      "params": {
        "anyone_can_create#0": "uint64",
        "minimum_holding#0": "uint64",
        "assetId#0": "uint64"
      },
      "block": "configureContract",
      "stack_in": [],
      "op": "proto 3 0"
    },
    "355": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "356": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager_address\""
      ]
    },
    "357": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "358": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "359": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "tmp%0#0"
      ]
    },
    "361": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "362": {
      "error": "Only the manager can configure the contract",
      "op": "assert // Only the manager can configure the contract",
      "stack_out": []
    },
    "363": {
      "op": "bytec_3 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\""
      ],
      "stack_out": [
        "\"anyone_can_create\""
      ]
    },
    "364": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ],
      "stack_out": [
        "\"anyone_can_create\"",
        "anyone_can_create#0 (copy)"
      ]
    },
    "366": {
      "op": "app_global_put",
      "stack_out": []
    },
    "367": {
      "retsub": true,
      "op": "retsub"
    },
    "368": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.optInToAsset",
      "params": {
        "assetId#0": "uint64"
      },
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "371": {
      "op": "itxn_begin"
    },
    "372": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "374": {
      "op": "dup",
      "defined_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "375": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "0"
      ]
    },
    "376": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "378": {
      "op": "frame_dig -1",
      "defined_out": [
        "assetId#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ],
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "assetId#0 (copy)"
      ]
    },
    "380": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "382": {
      "op": "itxn_field Sender",
      "stack_out": [
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "384": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "386": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "387": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "389": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "390": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "392": {
      "op": "itxn_submit"
    },
    "393": {
      "retsub": true,
      "op": "retsub"
    },
    "394": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createProposal",
      "params": {
        "proposal_title#0": "bytes",
        "proposal_description#0": "bytes",
        "expires_in#0": "uint64",
        "fund_pool_txn#0": "uint64",
        "vote_price#0": "uint64",
        "mbr_txn#0": "uint64"
      },
      "block": "createProposal",
      "stack_in": [],
      "op": "proto 6 0"
    },
    "397": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "398": {
      "op": "bytec_3 // \"anyone_can_create\"",
      "defined_out": [
        "\"anyone_can_create\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"anyone_can_create\""
      ]
    },
    "399": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "400": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "401": {
      "op": "bnz createProposal_after_if_else@2",
      "stack_out": []
    },
    "404": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "405": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"manager_address\""
      ]
    },
    "406": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "407": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "408": {
      "op": "txn Sender",
      "defined_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "tmp%1#0"
      ]
    },
    "410": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "411": {
      "error": "Only the manager can create proposals",
      "op": "assert // Only the manager can create proposals",
      "stack_out": []
    },
    "412": {
      "block": "createProposal_after_if_else@2",
      "stack_in": [],
      "op": "frame_dig -3",
      "defined_out": [
        "fund_pool_txn#0 (copy)"
      ],
      "stack_out": [
        "fund_pool_txn#0 (copy)"
      ]
    },
    "414": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "assetId#0"
      ],
      "stack_out": [
        "assetId#0"
      ]
    },
    "416": {
      "op": "frame_dig -3",
      "stack_out": [
        "assetId#0",
        "fund_pool_txn#0 (copy)"
      ]
    },
    "418": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "assetId#0",
        "initialPrizePool#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0"
      ]
    },
    "420": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "assetId#0",
        "currentTimestamp#0",
        "initialPrizePool#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "currentTimestamp#0"
      ]
    },
    "422": {
      "op": "dup",
      "defined_out": [
        "assetId#0",
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "initialPrizePool#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)"
      ]
    },
    "423": {
      "op": "frame_dig -4",
      "defined_out": [
        "assetId#0",
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)",
        "initialPrizePool#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "currentTimestamp#0",
        "currentTimestamp#0 (copy)",
        "expires_in#0 (copy)"
      ]
    },
    "425": {
      "op": "+",
      "defined_out": [
        "assetId#0",
        "currentTimestamp#0",
        "initialPrizePool#0",
        "proposal_expiry_timestamp#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "currentTimestamp#0",
        "proposal_expiry_timestamp#0"
      ]
    },
    "426": {
      "op": "itob",
      "defined_out": [
        "assetId#0",
        "currentTimestamp#0",
        "initialPrizePool#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "currentTimestamp#0",
        "val_as_bytes%0#0"
      ]
    },
    "427": {
      "op": "swap",
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "currentTimestamp#0"
      ]
    },
    "428": {
      "op": "itob",
      "defined_out": [
        "assetId#0",
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "assetId#0",
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "429": {
      "op": "uncover 3",
      "stack_out": [
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "assetId#0"
      ]
    },
    "431": {
      "op": "itob",
      "defined_out": [
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "initialPrizePool#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0"
      ]
    },
    "432": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "initialPrizePool#0"
      ]
    },
    "434": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0"
      ]
    },
    "435": {
      "op": "frame_dig -2",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "vote_price#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "vote_price#0 (copy)"
      ]
    },
    "437": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ]
    },
    "438": {
      "op": "frame_dig -6",
      "defined_out": [
        "proposal_title#0 (copy)",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "proposal_title#0 (copy)"
      ]
    },
    "440": {
      "op": "len",
      "defined_out": [
        "length%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "length%0#0"
      ]
    },
    "441": {
      "op": "itob",
      "defined_out": [
        "as_bytes%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "as_bytes%0#0"
      ]
    },
    "442": {
      "op": "extract 6 2",
      "defined_out": [
        "length_uint16%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "length_uint16%0#0"
      ]
    },
    "445": {
      "op": "frame_dig -6",
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "length_uint16%0#0",
        "proposal_title#0 (copy)"
      ]
    },
    "447": {
      "op": "concat",
      "defined_out": [
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0"
      ]
    },
    "448": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%1#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0"
      ]
    },
    "450": {
      "op": "uncover 5",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "val_as_bytes%0#0",
        "val_as_bytes%1#0"
      ]
    },
    "452": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0"
      ]
    },
    "453": {
      "op": "bytec 4 // 0x0000000000000000",
      "defined_out": [
        "0x0000000000000000",
        "encoded_tuple_buffer%2#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%2#0",
        "0x0000000000000000"
      ]
    },
    "455": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%3#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0"
      ]
    },
    "456": {
      "op": "bytec 4 // 0x0000000000000000",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%3#0",
        "0x0000000000000000"
      ]
    },
    "458": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%4#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%3#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0"
      ]
    },
    "459": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%4#0",
        "val_as_bytes%3#0"
      ]
    },
    "461": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%5#0",
        "encoded_value%0#0",
        "val_as_bytes%2#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0"
      ]
    },
    "462": {
      "op": "uncover 3",
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%5#0",
        "val_as_bytes%2#0"
      ]
    },
    "464": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%6#0",
        "encoded_value%0#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0"
      ]
    },
    "465": {
      "op": "uncover 2",
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%6#0",
        "val_as_bytes%4#0"
      ]
    },
    "467": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0"
      ]
    },
    "468": {
      "op": "pushbytes 0x003a",
      "defined_out": [
        "0x003a",
        "encoded_tuple_buffer%7#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%7#0",
        "0x003a"
      ]
    },
    "472": {
      "op": "concat",
      "defined_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ],
      "stack_out": [
        "encoded_value%0#0",
        "encoded_tuple_buffer%8#0"
      ]
    },
    "473": {
      "op": "swap",
      "stack_out": [
        "encoded_tuple_buffer%8#0",
        "encoded_value%0#0"
      ]
    },
    "474": {
      "op": "concat",
      "defined_out": [
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0"
      ]
    },
    "475": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0"
      ]
    },
    "476": {
      "op": "bytec_2 // \"proposal_count\"",
      "defined_out": [
        "\"proposal_count\"",
        "0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "0",
        "\"proposal_count\""
      ]
    },
    "477": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "478": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0"
      ]
    },
    "479": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "maybe_value%2#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_value%2#0",
        "1"
      ]
    },
    "480": {
      "op": "+",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0"
      ]
    },
    "481": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "newProposalNonce#0 (copy)"
      ]
    },
    "482": {
      "op": "itob",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%5#0"
      ]
    },
    "483": {
      "op": "bytec_1 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "newProposalNonce#0",
        "proposal#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "val_as_bytes%5#0",
        "\"_p\""
      ]
    },
    "484": {
      "op": "swap",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "\"_p\"",
        "val_as_bytes%5#0"
      ]
    },
    "485": {
      "op": "concat",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0"
      ]
    },
    "486": {
      "op": "dup",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "487": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "newProposalNonce#0",
        "proposal#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "488": {
      "op": "bury 1",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0",
        "maybe_exists%3#0"
      ]
    },
    "490": {
      "op": "!",
      "defined_out": [
        "newProposalNonce#0",
        "proposal#0",
        "tmp%3#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0",
        "tmp%4#0"
      ]
    },
    "491": {
      "error": "Proposal already exists",
      "op": "assert // Proposal already exists",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0"
      ]
    },
    "492": {
      "op": "bytec_2 // \"proposal_count\"",
      "stack_out": [
        "proposal#0",
        "newProposalNonce#0",
        "tmp%3#0",
        "\"proposal_count\""
      ]
    },
    "493": {
      "op": "uncover 2",
      "stack_out": [
        "proposal#0",
        "tmp%3#0",
        "\"proposal_count\"",
        "newProposalNonce#0"
      ]
    },
    "495": {
      "op": "app_global_put",
      "stack_out": [
        "proposal#0",
        "tmp%3#0"
      ]
    },
    "496": {
      "op": "dup",
      "stack_out": [
        "proposal#0",
        "tmp%3#0",
        "tmp%3#0 (copy)"
      ]
    },
    "497": {
      "op": "box_del",
      "defined_out": [
        "proposal#0",
        "tmp%3#0",
        "{box_del}"
      ],
      "stack_out": [
        "proposal#0",
        "tmp%3#0",
        "{box_del}"
      ]
    },
    "498": {
      "op": "pop",
      "stack_out": [
        "proposal#0",
        "tmp%3#0"
      ]
    },
    "499": {
      "op": "swap",
      "stack_out": [
        "tmp%3#0",
        "proposal#0"
      ]
    },
    "500": {
      "op": "box_put",
      "stack_out": []
    },
    "501": {
      "retsub": true,
      "op": "retsub"
    },
    "502": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.voteProposal",
      "params": {
        "proposal_id#0": "uint64",
        "vote#0": "uint64",
        "mbr_txn#0": "uint64",
        "fundVoteTxn#0": "uint64"
      },
      "block": "voteProposal",
      "stack_in": [],
      "op": "proto 4 0"
    },
    "505": {
      "op": "frame_dig -4",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "507": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "508": {
      "op": "bytec_1 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "509": {
      "op": "dig 1",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "511": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "512": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "513": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "514": {
      "op": "bury 1",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "maybe_exists%0#0"
      ]
    },
    "516": {
      "error": "The proposal the user is trying to vote on does not exist",
      "op": "assert // The proposal the user is trying to vote on does not exist",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "519": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "521": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "val_as_bytes%0#0",
        "tmp%1#0"
      ]
    },
    "522": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0"
      ]
    },
    "523": {
      "op": "bytec 5 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "voteId#0",
        "\"_v\""
      ]
    },
    "525": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "\"_v\"",
        "voteId#0"
      ]
    },
    "526": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "527": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%2#0 (copy)"
      ]
    },
    "528": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "529": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "maybe_exists%1#0"
      ]
    },
    "531": {
      "op": "!",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%3#0"
      ]
    },
    "532": {
      "error": "The user has already voted on this proposal",
      "op": "assert // The user has already voted on this proposal",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0"
      ]
    },
    "533": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "tmp%0#0 (copy)"
      ]
    },
    "535": {
      "op": "box_get",
      "defined_out": [
        "currentProposal#0",
        "maybe_exists%2#0",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "maybe_exists%2#0"
      ]
    },
    "536": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0"
      ]
    },
    "537": {
      "op": "frame_dig -1",
      "defined_out": [
        "currentProposal#0",
        "fundVoteTxn#0 (copy)",
        "tmp%0#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "fundVoteTxn#0 (copy)"
      ]
    },
    "539": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0"
      ]
    },
    "541": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentProposal#0 (copy)"
      ]
    },
    "543": {
      "op": "pushint 48 // 48",
      "defined_out": [
        "48",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentProposal#0 (copy)",
        "48"
      ]
    },
    "545": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "546": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%5#0 (copy)",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%5#0 (copy)"
      ]
    },
    "548": {
      "op": "==",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%8#0"
      ]
    },
    "549": {
      "error": "The fund vote transaction must be equal to the vote price",
      "op": "assert // The fund vote transaction must be equal to the vote price",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0"
      ]
    },
    "550": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "fundVoteTxn#0 (copy)"
      ]
    },
    "552": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%9#0"
      ]
    },
    "554": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%10#0",
        "tmp%2#0",
        "tmp%5#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%9#0",
        "tmp%10#0"
      ]
    },
    "556": {
      "op": "==",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%11#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "tmp%11#0"
      ]
    },
    "557": {
      "error": "The fund vote transaction must be to the contract",
      "op": "assert // The fund vote transaction must be to the contract",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0"
      ]
    },
    "558": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0"
      ]
    },
    "560": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "currentProposal#0 (copy)"
      ]
    },
    "562": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "currentProposal#0 (copy)",
        "0"
      ]
    },
    "563": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "expiryTime#0"
      ]
    },
    "564": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "currentTime#0 (copy)",
        "expiryTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "expiryTime#0",
        "currentTime#0 (copy)"
      ]
    },
    "566": {
      "op": ">",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%13#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%13#0"
      ]
    },
    "567": {
      "error": "The proposal has expired",
      "op": "assert // The proposal has expired",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0"
      ]
    },
    "568": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%14#0"
      ]
    },
    "570": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%14#0",
        "0"
      ]
    },
    "571": {
      "op": "bytec_0 // \"manager_address\"",
      "defined_out": [
        "\"manager_address\"",
        "0",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%14#0",
        "0",
        "\"manager_address\""
      ]
    },
    "572": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "tmp%0#0",
        "tmp%14#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%14#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "573": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%14#0",
        "maybe_value%3#0"
      ]
    },
    "574": {
      "op": "!=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%15#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%15#0"
      ]
    },
    "575": {
      "error": "The manager cannot vote on proposals",
      "op": "assert // The manager cannot vote on proposals",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0"
      ]
    },
    "576": {
      "op": "frame_dig -2",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "mbr_txn#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "578": {
      "op": "gtxns Amount",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%16#0"
      ]
    },
    "580": {
      "op": "pushint 14490 // 14490",
      "defined_out": [
        "14490",
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%16#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%16#0",
        "14490"
      ]
    },
    "583": {
      "op": ">=",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%17#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%17#0"
      ]
    },
    "584": {
      "error": "Payment must cover the vote box MBR",
      "op": "assert // Payment must cover the vote box MBR",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0"
      ]
    },
    "585": {
      "op": "frame_dig -2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "mbr_txn#0 (copy)"
      ]
    },
    "587": {
      "op": "gtxns Receiver",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%18#0"
      ]
    },
    "589": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%18#0",
        "tmp%19#0",
        "tmp%2#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%18#0",
        "tmp%19#0"
      ]
    },
    "591": {
      "op": "==",
      "defined_out": [
        "currentProposal#0",
        "currentTime#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%20#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0",
        "tmp%20#0"
      ]
    },
    "592": {
      "error": "Payment must be to the contract",
      "op": "assert // Payment must be to the contract",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "currentTime#0"
      ]
    },
    "593": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "val_as_bytes%3#0"
      ]
    },
    "594": {
      "op": "pushbytes 0x00",
      "defined_out": [
        "0x00",
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "val_as_bytes%3#0",
        "0x00"
      ]
    },
    "597": {
      "op": "concat",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0"
      ]
    },
    "598": {
      "op": "dig 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "currentProposal#0 (copy)"
      ]
    },
    "600": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "currentProposal#0 (copy)",
        "16"
      ]
    },
    "602": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "tmp%22#0"
      ]
    },
    "603": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%22#0",
        "tmp%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "tmp%22#0",
        "1"
      ]
    },
    "604": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0"
      ]
    },
    "605": {
      "op": "dig 3",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)"
      ]
    },
    "607": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "currentProposal#0 (copy)",
        "24"
      ]
    },
    "609": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%24#0",
        "tmp%5#0",
        "updatedVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%24#0"
      ]
    },
    "610": {
      "op": "frame_dig -3",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%24#0",
        "tmp%5#0",
        "updatedVotes#0",
        "vote#0 (copy)",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "tmp%24#0",
        "vote#0 (copy)"
      ]
    },
    "612": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0"
      ]
    },
    "613": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "currentProposal#0 (copy)"
      ]
    },
    "615": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%5#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "currentProposal#0 (copy)",
        "32"
      ]
    },
    "617": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "tmp%26#0",
        "tmp%5#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "tmp%5#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "tmp%26#0"
      ]
    },
    "618": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "tmp%26#0",
        "tmp%5#0"
      ]
    },
    "620": {
      "op": "+",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedPrizePool#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedVotes#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0"
      ]
    },
    "621": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0",
        "updatedVotes#0"
      ]
    },
    "623": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%2#0",
        "updatedPrizePool#0",
        "updatedYesVotes#0",
        "val_as_bytes%4#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "currentProposal#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0",
        "val_as_bytes%4#0"
      ]
    },
    "624": {
      "op": "uncover 4",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0",
        "val_as_bytes%4#0",
        "currentProposal#0"
      ]
    },
    "626": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0",
        "currentProposal#0",
        "val_as_bytes%4#0"
      ]
    },
    "627": {
      "op": "replace2 16",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedPrizePool#0",
        "updatedProposal#1",
        "updatedYesVotes#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedYesVotes#0",
        "updatedPrizePool#0",
        "updatedProposal#1"
      ]
    },
    "629": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedPrizePool#0",
        "updatedProposal#1",
        "updatedYesVotes#0"
      ]
    },
    "631": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedPrizePool#0",
        "updatedProposal#1",
        "val_as_bytes%5#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedPrizePool#0",
        "updatedProposal#1",
        "val_as_bytes%5#0"
      ]
    },
    "632": {
      "op": "replace2 24",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedPrizePool#0",
        "updatedProposal#1"
      ]
    },
    "634": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "updatedPrizePool#0"
      ]
    },
    "635": {
      "op": "itob",
      "defined_out": [
        "tmp%0#0",
        "tmp%2#0",
        "updatedProposal#1",
        "val_as_bytes%6#0",
        "voteData#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1",
        "val_as_bytes%6#0"
      ]
    },
    "636": {
      "op": "replace2 32",
      "stack_out": [
        "tmp%0#0",
        "tmp%2#0",
        "voteData#0",
        "updatedProposal#1"
      ]
    },
    "638": {
      "op": "cover 2",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%2#0",
        "voteData#0"
      ]
    },
    "640": {
      "op": "box_put",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "641": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%0#0 (copy)"
      ]
    },
    "643": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ]
    },
    "644": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "645": {
      "op": "box_put",
      "stack_out": []
    },
    "646": {
      "retsub": true,
      "op": "retsub"
    },
    "647": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.claimParticipationReward",
      "params": {
        "proposal_id#0": "uint64"
      },
      "block": "claimParticipationReward",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "650": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "652": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "653": {
      "op": "bytec_1 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "654": {
      "op": "dig 1",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0",
        "val_as_bytes%0#0 (copy)"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\"",
        "val_as_bytes%0#0 (copy)"
      ]
    },
    "656": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0"
      ]
    },
    "657": {
      "op": "dup",
      "defined_out": [
        "tmp%0#0",
        "tmp%0#0 (copy)",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "tmp%0#0 (copy)"
      ]
    },
    "658": {
      "op": "box_get",
      "defined_out": [
        "currentProposal#0",
        "maybe_exists%0#0",
        "tmp%0#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "currentProposal#0",
        "maybe_exists%0#0"
      ]
    },
    "659": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "currentProposal#0"
      ]
    },
    "660": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "val_as_bytes%0#0",
        "voter#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "tmp%0#0",
        "currentProposal#0",
        "voter#0"
      ]
    },
    "662": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "voter#0",
        "val_as_bytes%0#0"
      ]
    },
    "664": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "val_as_bytes%0#0",
        "voter#0"
      ]
    },
    "665": {
      "op": "concat",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "voteId#0"
      ]
    },
    "666": {
      "op": "bytec 5 // \"_v\"",
      "defined_out": [
        "\"_v\"",
        "currentProposal#0",
        "tmp%0#0",
        "voteId#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "voteId#0",
        "\"_v\""
      ]
    },
    "668": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "\"_v\"",
        "voteId#0"
      ]
    },
    "669": {
      "op": "concat",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%0#1"
      ]
    },
    "670": {
      "op": "box_len",
      "defined_out": [
        "currentProposal#0",
        "maybe_exists%0#0",
        "maybe_value%0#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "maybe_value%0#1",
        "maybe_exists%0#0"
      ]
    },
    "671": {
      "op": "bury 1",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "maybe_exists%0#0"
      ]
    },
    "673": {
      "error": "The user has not voted on this proposal, therefore cannot claim rewards",
      "op": "assert // The user has not voted on this proposal, therefore cannot claim rewards",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0"
      ]
    },
    "674": {
      "op": "dup",
      "defined_out": [
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "currentProposal#0 (copy)"
      ]
    },
    "675": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "32"
      ]
    },
    "677": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0"
      ]
    },
    "678": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "currentProposal#0 (copy)"
      ]
    },
    "680": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "currentProposal#0 (copy)",
        "16"
      ]
    },
    "682": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "tmp%6#0"
      ]
    },
    "683": {
      "op": "dig 1",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "tmp%6#0",
        "tmp%4#0 (copy)"
      ]
    },
    "685": {
      "op": "swap",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "tmp%4#0 (copy)",
        "tmp%6#0"
      ]
    },
    "686": {
      "op": "/",
      "defined_out": [
        "currentProposal#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0"
      ]
    },
    "687": {
      "op": "itxn_begin"
    },
    "688": {
      "op": "txn Sender",
      "defined_out": [
        "currentProposal#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "690": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "currentProposal#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "692": {
      "op": "dig 4",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "currentProposal#0 (copy)"
      ]
    },
    "694": {
      "op": "pushint 40 // 40",
      "defined_out": [
        "40",
        "currentProposal#0",
        "currentProposal#0 (copy)",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "currentProposal#0 (copy)",
        "40"
      ]
    },
    "696": {
      "op": "extract_uint64",
      "defined_out": [
        "currentProposal#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "697": {
      "op": "dig 3",
      "defined_out": [
        "currentProposal#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rewardAmount#0",
        "rewardAmount#0 (copy)",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0",
        "rewardAmount#0 (copy)"
      ]
    },
    "699": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0",
        "inner_txn_params%0%%param_XferAsset_idx_0#0"
      ]
    },
    "701": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "inner_txn_params%0%%param_Sender_idx_0#0"
      ]
    },
    "703": {
      "op": "itxn_field Sender",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "705": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0"
      ]
    },
    "707": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "currentProposal#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "4"
      ]
    },
    "708": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0"
      ]
    },
    "710": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "currentProposal#0",
        "rewardAmount#0",
        "tmp%0#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0",
        "0"
      ]
    },
    "711": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "tmp%4#0",
        "rewardAmount#0"
      ]
    },
    "713": {
      "op": "itxn_submit"
    },
    "714": {
      "op": "-",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "to_encode%0#0"
      ]
    },
    "715": {
      "op": "itob",
      "defined_out": [
        "currentProposal#0",
        "tmp%0#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "currentProposal#0",
        "val_as_bytes%1#0"
      ]
    },
    "716": {
      "op": "replace2 32",
      "defined_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ],
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "718": {
      "op": "dig 1",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "tmp%0#0 (copy)"
      ]
    },
    "720": {
      "op": "box_del",
      "defined_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ],
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1",
        "{box_del}"
      ]
    },
    "721": {
      "op": "pop",
      "stack_out": [
        "tmp%0#0",
        "updatedProposal#1"
      ]
    },
    "722": {
      "op": "box_put",
      "stack_out": []
    },
    "723": {
      "retsub": true,
      "op": "retsub"
    },
    "724": {
      "subroutine": "smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.getProposal",
      "params": {
        "proposal_id#0": "uint64"
      },
      "block": "getProposal",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "727": {
      "op": "frame_dig -1",
      "defined_out": [
        "proposal_id#0 (copy)"
      ],
      "stack_out": [
        "proposal_id#0 (copy)"
      ]
    },
    "729": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "730": {
      "op": "bytec_1 // \"_p\"",
      "defined_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "\"_p\""
      ]
    },
    "731": {
      "op": "swap",
      "stack_out": [
        "\"_p\"",
        "val_as_bytes%0#0"
      ]
    },
    "732": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "733": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%0#0",
        "proposal#0"
      ],
      "stack_out": [
        "proposal#0",
        "maybe_exists%0#0"
      ]
    },
    "734": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "proposal#0"
      ]
    },
    "735": {
      "retsub": true,
      "op": "retsub"
    }
  }
}