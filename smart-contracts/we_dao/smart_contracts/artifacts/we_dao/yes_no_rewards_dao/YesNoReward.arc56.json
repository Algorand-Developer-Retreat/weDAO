{
    "name": "YesNoReward",
    "structs": {
        "ProposalDataType": [
            {
                "name": "proposal_expiry_timestamp",
                "type": "uint64"
            },
            {
                "name": "proposal_start_timestamp",
                "type": "uint64"
            },
            {
                "name": "proposal_total_votes",
                "type": "uint64"
            },
            {
                "name": "proposal_yes_votes",
                "type": "uint64"
            },
            {
                "name": "proposal_prize_pool",
                "type": "uint64"
            },
            {
                "name": "proposal_asset",
                "type": "uint64"
            },
            {
                "name": "vote_price",
                "type": "uint64"
            },
            {
                "name": "proposal_title",
                "type": "string"
            }
        ],
        "VoteDataType": [
            {
                "name": "vote_timestamp",
                "type": "uint64"
            },
            {
                "name": "claimed",
                "type": "bool"
            }
        ]
    },
    "methods": [
        {
            "name": "createApplication",
            "args": [
                {
                    "type": "bool",
                    "name": "anyone_can_create"
                },
                {
                    "type": "uint64",
                    "name": "minimum_holding"
                },
                {
                    "type": "uint64",
                    "name": "asset_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [
                    "NoOp"
                ],
                "call": []
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "configureContract",
            "args": [
                {
                    "type": "bool",
                    "name": "anyone_can_create"
                },
                {
                    "type": "uint64",
                    "name": "minimum_holding"
                },
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToAsset",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "createProposal",
            "args": [
                {
                    "type": "string",
                    "name": "proposal_title"
                },
                {
                    "type": "string",
                    "name": "proposal_description"
                },
                {
                    "type": "uint64",
                    "name": "expires_in"
                },
                {
                    "type": "axfer",
                    "name": "fund_pool_txn"
                },
                {
                    "type": "uint64",
                    "name": "vote_price"
                },
                {
                    "type": "pay",
                    "name": "mbr_txn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "voteProposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                },
                {
                    "type": "bool",
                    "name": "vote"
                },
                {
                    "type": "pay",
                    "name": "mbr_txn"
                },
                {
                    "type": "axfer",
                    "name": "fundVoteTxn"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimParticipationReward",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getProposal",
            "args": [
                {
                    "type": "uint64",
                    "name": "proposal_id"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)",
                "struct": "ProposalDataType"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 2,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "manager_address": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bWFuYWdlcl9hZGRyZXNz"
                },
                "proposal_count": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cHJvcG9zYWxfY291bnQ="
                },
                "anyone_can_create": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YW55b25lX2Nhbl9jcmVhdGU="
                }
            },
            "local": {},
            "box": {
                "proposal": {
                    "keyType": "AVMString",
                    "valueType": "ProposalDataType",
                    "key": "X3A="
                },
                "vote": {
                    "keyType": "AVMString",
                    "valueType": "VoteDataType",
                    "key": "X3Y="
                }
            }
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        536,
                        659,
                        734
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        139,
                        164,
                        180,
                        221,
                        273,
                        289,
                        314
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        362
                    ],
                    "errorMessage": "Only the manager can configure the contract"
                },
                {
                    "pc": [
                        411
                    ],
                    "errorMessage": "Only the manager can create proposals"
                },
                {
                    "pc": [
                        592
                    ],
                    "errorMessage": "Payment must be to the contract"
                },
                {
                    "pc": [
                        584
                    ],
                    "errorMessage": "Payment must cover the vote box MBR"
                },
                {
                    "pc": [
                        491
                    ],
                    "errorMessage": "Proposal already exists"
                },
                {
                    "pc": [
                        549
                    ],
                    "errorMessage": "The fund vote transaction must be equal to the vote price"
                },
                {
                    "pc": [
                        557
                    ],
                    "errorMessage": "The fund vote transaction must be to the contract"
                },
                {
                    "pc": [
                        575
                    ],
                    "errorMessage": "The manager cannot vote on proposals"
                },
                {
                    "pc": [
                        567
                    ],
                    "errorMessage": "The proposal has expired"
                },
                {
                    "pc": [
                        516
                    ],
                    "errorMessage": "The proposal the user is trying to vote on does not exist"
                },
                {
                    "pc": [
                        532
                    ],
                    "errorMessage": "The user has already voted on this proposal"
                },
                {
                    "pc": [
                        673
                    ],
                    "errorMessage": "The user has not voted on this proposal, therefore cannot claim rewards"
                },
                {
                    "pc": [
                        318
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        142,
                        167,
                        183,
                        224,
                        276,
                        292
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        358,
                        400,
                        407,
                        478,
                        573
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        212,
                        250
                    ],
                    "errorMessage": "transaction type is axfer"
                },
                {
                    "pc": [
                        202,
                        264
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEEAiYGD21hbmFnZXJfYWRkcmVzcwJfcA5wcm9wb3NhbF9jb3VudBFhbnlvbmVfY2FuX2NyZWF0ZQgAAAAAAAAAAAJfdjEbQQA4ggcE8V5TsgQhuJ3eBG/pr4UETFzD9ATMjMw9BACQj0AE7lb7wjYaAI4HALEAmACIAFQAKwAbAAIiQzEZFEQxGEQ2GgEXiAI+gAQVH3x1TFCwI0MxGRREMRhENhoBF4gB2CNDMRkURDEYRDYaARc2GgIiUzEWJQlJOBAjEkQxFiMJSTgQJBJEiAEeI0MxGRREMRhENhoBVwIANhoCVwIANhoDFzEWJQlJOBAkEkQ2GgQXMRYjCUk4ECMSRIgAfiNDMRkURDEYRDYaAReIAFQjQzEZFEQxGEQ2GgEiUzYaAhc2GgMXiAArI0MxGRREMRgURDYaASJTNhoCFzYaAxeIAAIjQ4oDACgxAGcqImcri/1niYoDACIoZUQxABJEK4v9Z4mKAQCxMgpJIrISi/+yEbIAshQkshAisgGziYoGACIrZURAAAgiKGVEMQASRIv9OBGL/TgSMgdJi/wIFkwWTwMWTwMWi/4Wi/oVFlcGAov6UE8FTwVQJwRQJwRQTwNQTwNQTwJQgAIAOlBMUCIqZUQjCEkWKUxQSb1FARREKk8CZ0m8SEy/iYoEAIv8FilLAVBJvUUBRDEATwJMUCcFTFBJvUUBFERLAb5Ei/84EksBgTBbSwESRIv/OBQyChJEMgdLAiJbSwENRDEAIihlRBNEi/44CIGacQ9Ei/44BzIKEkQWgAEAUEsCgRBbIwhLA4EYW4v9CEsEgSBbTwQITwIWTwRMXBBPAhZcGEwWXCBOAr9LAbxIv4mKAQCL/xYpSwFQSb5EMQBPA0xQJwVMUL1FAURJgSBbSwGBEFtLAUwKsTEAMgpLBIEoW0sDshKyEbIAshQkshAisgGzCRZcIEsBvEi/iYoBAYv/FilMUL5EiQ==",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 5,
            "patch": 3
        }
    },
    "events": [],
    "templateVariables": {}
}