#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1 4 2
    bytecblock "manager_address" "_p" "proposal_count" "anyone_can_create" 0x0000000000000000 "_v"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txn NumAppArgs
    bz main_after_if_else@13
    pushbytess 0xf15e53b2 0x21b89dde 0x6fe9af85 0x4c5cc3f4 0xcc8ccc3d 0x00908f40 0xee56fbc2 // method "createApplication(bool,uint64,uint64)void", method "configureContract(bool,uint64,uint64)void", method "optInToAsset(uint64)void", method "createProposal(string,string,uint64,axfer,uint64,pay)void", method "voteProposal(uint64,bool,pay,axfer)void", method "claimParticipationReward(uint64)void", method "getProposal(uint64)(uint64,uint64,uint64,uint64,uint64,uint64,uint64,string)"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_configureContract_route@4 main_optInToAsset_route@5 main_createProposal_route@6 main_voteProposal_route@7 main_claimParticipationReward_route@8 main_getProposal_route@9

main_after_if_else@13:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    intc_0 // 0
    return

main_getProposal_route@9:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:246
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:246
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    callsub getProposal
    pushbytes 0x151f7c75
    swap
    concat
    log
    intc_1 // 1
    return

main_claimParticipationReward_route@8:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:203
    // public claimParticipationReward(proposal_id: uint64): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:203
    // public claimParticipationReward(proposal_id: uint64): void {
    callsub claimParticipationReward
    intc_1 // 1
    return

main_voteProposal_route@7:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:118
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    btoi
    txna ApplicationArgs 2
    intc_0 // 0
    getbit
    txn GroupIndex
    intc_3 // 2
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:118
    // @abimethod({ allowActions: 'NoOp' })
    callsub voteProposal
    intc_1 // 1
    return

main_createProposal_route@6:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:68
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    extract 2 0
    txna ApplicationArgs 2
    extract 2 0
    txna ApplicationArgs 3
    btoi
    txn GroupIndex
    intc_3 // 2
    -
    dup
    gtxns TypeEnum
    intc_2 // axfer
    ==
    assert // transaction type is axfer
    txna ApplicationArgs 4
    btoi
    txn GroupIndex
    intc_1 // 1
    -
    dup
    gtxns TypeEnum
    intc_1 // pay
    ==
    assert // transaction type is pay
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:68
    // @abimethod({ allowActions: 'NoOp' })
    callsub createProposal
    intc_1 // 1
    return

main_optInToAsset_route@5:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:55
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    btoi
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:55
    // @abimethod({ allowActions: 'NoOp' })
    callsub optInToAsset
    intc_1 // 1
    return

main_configureContract_route@4:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:47
    // @abimethod({ allowActions: 'NoOp' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:47
    // @abimethod({ allowActions: 'NoOp' })
    callsub configureContract
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:35
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    !
    assert // can only call when creating
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:19
    // export class YesNoReward extends Contract {
    txna ApplicationArgs 1
    intc_0 // 0
    getbit
    txna ApplicationArgs 2
    btoi
    txna ApplicationArgs 3
    btoi
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:35
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    callsub createApplication
    intc_1 // 1
    return


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createApplication(anyone_can_create: uint64, minimum_holding: uint64, asset_id: uint64) -> void:
createApplication:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:35-36
    // @abimethod({ allowActions: 'NoOp', onCreate: 'require' })
    // public createApplication(anyone_can_create: boolean, minimum_holding: uint64, asset_id: uint64): void {
    proto 3 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:21
    // manager_address = GlobalState<Account>()
    bytec_0 // "manager_address"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:38
    // this.manager_address.value = Txn.sender
    txn Sender
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:24
    // proposal_count = GlobalState<uint64>()
    bytec_2 // "proposal_count"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:41
    // this.proposal_count.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:27
    // anyone_can_create = GlobalState<boolean>()
    bytec_3 // "anyone_can_create"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:44
    // this.anyone_can_create.value = anyone_can_create
    frame_dig -3
    app_global_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.configureContract(anyone_can_create: uint64, minimum_holding: uint64, assetId: uint64) -> void:
configureContract:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:47-48
    // @abimethod({ allowActions: 'NoOp' })
    // public configureContract(anyone_can_create: boolean, minimum_holding: uint64, assetId: uint64): void {
    proto 3 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:21
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:50
    // assert(this.manager_address.value === Txn.sender, 'Only the manager can configure the contract')
    txn Sender
    ==
    assert // Only the manager can configure the contract
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:27
    // anyone_can_create = GlobalState<boolean>()
    bytec_3 // "anyone_can_create"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:52
    // this.anyone_can_create.value = anyone_can_create
    frame_dig -3
    app_global_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.optInToAsset(assetId: uint64) -> void:
optInToAsset:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:55-56
    // @abimethod({ allowActions: 'NoOp' })
    // public optInToAsset(assetId: uint64): void {
    proto 1 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:57-65
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Global.currentApplicationAddress,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:59
    // assetReceiver: op.Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:60
    // sender: op.Global.currentApplicationAddress,
    dup
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:62
    // assetAmount: 0,
    intc_0 // 0
    itxn_field AssetAmount
    frame_dig -1
    itxn_field XferAsset
    itxn_field Sender
    itxn_field AssetReceiver
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:57-64
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Global.currentApplicationAddress,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:63
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:57-65
    // itxn
    //   .assetTransfer({
    //     assetReceiver: op.Global.currentApplicationAddress,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: assetId,
    //     assetAmount: 0,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.createProposal(proposal_title: bytes, proposal_description: bytes, expires_in: uint64, fund_pool_txn: uint64, vote_price: uint64, mbr_txn: uint64) -> void:
createProposal:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:68-76
    // @abimethod({ allowActions: 'NoOp' })
    // public createProposal(
    //   proposal_title: string,
    //   proposal_description: string,
    //   expires_in: uint64,
    //   fund_pool_txn: gtxn.AssetTransferTxn,
    //   vote_price: uint64,
    //   mbr_txn: gtxn.PaymentTxn,
    // ): void {
    proto 6 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:27
    // anyone_can_create = GlobalState<boolean>()
    intc_0 // 0
    bytec_3 // "anyone_can_create"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:77
    // if (this.anyone_can_create.value === false) {
    bnz createProposal_after_if_else@2
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:21
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:78
    // assert(this.manager_address.value === Txn.sender, 'Only the manager can create proposals')
    txn Sender
    ==
    assert // Only the manager can create proposals

createProposal_after_if_else@2:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:83
    // const assetId: uint64 = fund_pool_txn.xferAsset.id
    frame_dig -3
    gtxns XferAsset
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:84
    // const initialPrizePool: uint64 = fund_pool_txn.assetAmount
    frame_dig -3
    gtxns AssetAmount
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:87
    // const currentTimestamp: uint64 = op.Global.latestTimestamp
    global LatestTimestamp
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:92
    // const proposal_expiry_timestamp: uint64 = currentTimestamp + expires_in
    dup
    frame_dig -4
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:95
    // proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:96
    // proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    swap
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:99
    // proposal_asset: new arc4.UintN64(assetId),
    uncover 3
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:100
    // proposal_prize_pool: new arc4.UintN64(initialPrizePool),
    uncover 3
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:101
    // vote_price: new arc4.UintN64(vote_price),
    frame_dig -2
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:102
    // proposal_title: new arc4.Str(proposal_title),
    frame_dig -6
    len
    itob
    extract 6 2
    frame_dig -6
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:94-103
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(assetId),
    //   proposal_prize_pool: new arc4.UintN64(initialPrizePool),
    //   vote_price: new arc4.UintN64(vote_price),
    //   proposal_title: new arc4.Str(proposal_title),
    // })
    uncover 5
    uncover 5
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:97
    // proposal_total_votes: new arc4.UintN64(0),
    bytec 4 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:94-103
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(assetId),
    //   proposal_prize_pool: new arc4.UintN64(initialPrizePool),
    //   vote_price: new arc4.UintN64(vote_price),
    //   proposal_title: new arc4.Str(proposal_title),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:98
    // proposal_yes_votes: new arc4.UintN64(0),
    bytec 4 // 0x0000000000000000
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:94-103
    // const proposal: ProposalDataType = new ProposalDataType({
    //   proposal_expiry_timestamp: new arc4.UintN64(proposal_expiry_timestamp),
    //   proposal_start_timestamp: new arc4.UintN64(proposal_start_timestamp),
    //   proposal_total_votes: new arc4.UintN64(0),
    //   proposal_yes_votes: new arc4.UintN64(0),
    //   proposal_asset: new arc4.UintN64(assetId),
    //   proposal_prize_pool: new arc4.UintN64(initialPrizePool),
    //   vote_price: new arc4.UintN64(vote_price),
    //   proposal_title: new arc4.Str(proposal_title),
    // })
    concat
    uncover 3
    concat
    uncover 3
    concat
    uncover 2
    concat
    pushbytes 0x003a
    concat
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:24
    // proposal_count = GlobalState<uint64>()
    intc_0 // 0
    bytec_2 // "proposal_count"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:106
    // const newProposalNonce = Uint64(this.proposal_count.value + 1)
    intc_1 // 1
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:109
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec_1 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:109
    // assert(!this.proposal(new arc4.UintN64(newProposalNonce)).exists, 'Proposal already exists')
    dup
    box_len
    bury 1
    !
    assert // Proposal already exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:24
    // proposal_count = GlobalState<uint64>()
    bytec_2 // "proposal_count"
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:112
    // this.proposal_count.value = newProposalNonce
    uncover 2
    app_global_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:115
    // this.proposal(new arc4.UintN64(newProposalNonce)).value = proposal.copy()
    dup
    box_del
    pop
    swap
    box_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.voteProposal(proposal_id: uint64, vote: uint64, mbr_txn: uint64, fundVoteTxn: uint64) -> void:
voteProposal:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:118-124
    // @abimethod({ allowActions: 'NoOp' })
    // public voteProposal(
    //   proposal_id: uint64,
    //   vote: boolean,
    //   mbr_txn: gtxn.PaymentTxn,
    //   fundVoteTxn: gtxn.AssetTransferTxn,
    // ): void {
    proto 4 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:127
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    frame_dig -4
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec_1 // "_p"
    dig 1
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:127
    // this.proposal(new arc4.UintN64(proposal_id)).exists,
    dup
    box_len
    bury 1
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:126-129
    // assert(
    //   this.proposal(new arc4.UintN64(proposal_id)).exists,
    //   'The proposal the user is trying to vote on does not exist',
    // )
    assert // The proposal the user is trying to vote on does not exist
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:134
    // voter_address: new arc4.Address(Txn.sender),
    txn Sender
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:132-135
    // const voteId = new VoteIdType({
    //   proposal_id: new arc4.UintN64(proposal_id),
    //   voter_address: new arc4.Address(Txn.sender),
    // })
    uncover 2
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:33
    // vote = BoxMap<VoteIdType, VoteDataType>({ keyPrefix: '_v' })
    bytec 5 // "_v"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:138
    // assert(!this.vote(voteId).exists, 'The user has already voted on this proposal')
    dup
    box_len
    bury 1
    !
    assert // The user has already voted on this proposal
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:141
    // const currentProposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    dig 1
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:145
    // fundVoteTxn.assetAmount === currentProposal.vote_price.native,
    frame_dig -1
    gtxns AssetAmount
    dig 1
    pushint 48 // 48
    extract_uint64
    dig 1
    ==
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:144-147
    // assert(
    //   fundVoteTxn.assetAmount === currentProposal.vote_price.native,
    //   'The fund vote transaction must be equal to the vote price',
    // )
    assert // The fund vote transaction must be equal to the vote price
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:151
    // fundVoteTxn.assetReceiver === op.Global.currentApplicationAddress,
    frame_dig -1
    gtxns AssetReceiver
    global CurrentApplicationAddress
    ==
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:150-153
    // assert(
    //   fundVoteTxn.assetReceiver === op.Global.currentApplicationAddress,
    //   'The fund vote transaction must be to the contract',
    // )
    assert // The fund vote transaction must be to the contract
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:156
    // const currentTime = op.Global.latestTimestamp
    global LatestTimestamp
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:157
    // const expiryTime = currentProposal.proposal_expiry_timestamp.native
    dig 2
    intc_0 // 0
    extract_uint64
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:158
    // assert(currentTime < expiryTime, 'The proposal has expired')
    dig 1
    >
    assert // The proposal has expired
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:161
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    txn Sender
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:21
    // manager_address = GlobalState<Account>()
    intc_0 // 0
    bytec_0 // "manager_address"
    app_global_get_ex
    assert // check GlobalState exists
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:161
    // assert(Txn.sender !== this.manager_address.value, 'The manager cannot vote on proposals')
    !=
    assert // The manager cannot vote on proposals
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:164
    // assert(mbr_txn.amount >= 14490, 'Payment must cover the vote box MBR')
    frame_dig -2
    gtxns Amount
    pushint 14490 // 14490
    >=
    assert // Payment must cover the vote box MBR
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:167
    // assert(mbr_txn.receiver === op.Global.currentApplicationAddress, 'Payment must be to the contract')
    frame_dig -2
    gtxns Receiver
    global CurrentApplicationAddress
    ==
    assert // Payment must be to the contract
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:171
    // vote_timestamp: new arc4.UintN64(currentTime),
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:172
    // claimed: new arc4.Bool(false),
    pushbytes 0x00
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:170-173
    // const voteData = new VoteDataType({
    //   vote_timestamp: new arc4.UintN64(currentTime),
    //   claimed: new arc4.Bool(false),
    // })
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:177
    // const updatedVotes = Uint64(currentProposal.proposal_total_votes.native + 1)
    dig 2
    pushint 16 // 16
    extract_uint64
    intc_1 // 1
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:178
    // const updatedYesVotes = Uint64(currentProposal.proposal_yes_votes.native + (vote ? 1 : 0))
    dig 3
    pushint 24 // 24
    extract_uint64
    frame_dig -3
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:179
    // const updatedPrizePool = Uint64(currentProposal.proposal_prize_pool.native + fundVoteTxn.assetAmount)
    dig 4
    pushint 32 // 32
    extract_uint64
    uncover 4
    +
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:183
    // updatedProposal.proposal_total_votes = new arc4.UintN64(updatedVotes)
    uncover 2
    itob
    uncover 4
    swap
    replace2 16
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:184
    // updatedProposal.proposal_yes_votes = new arc4.UintN64(updatedYesVotes)
    uncover 2
    itob
    replace2 24
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:185
    // updatedProposal.proposal_prize_pool = new arc4.UintN64(updatedPrizePool)
    swap
    itob
    replace2 32
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:187
    // this.vote(voteId).value = voteData.copy()
    cover 2
    box_put
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:189
    // this.proposal(new arc4.UintN64(proposal_id)).value = updatedProposal.copy()
    dig 1
    box_del
    pop
    box_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.claimParticipationReward(proposal_id: uint64) -> void:
claimParticipationReward:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:203
    // public claimParticipationReward(proposal_id: uint64): void {
    proto 1 0
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:207
    // const currentProposal = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    frame_dig -1
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec_1 // "_p"
    dig 1
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:207
    // const currentProposal = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    dup
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:218
    // this.hasVoted(proposal_id, Txn.sender),
    txn Sender
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:194-197
    // const voteId = new VoteIdType({
    //   proposal_id: new arc4.UintN64(proposal_id),
    //   voter_address: new arc4.Address(voter),
    // })
    uncover 3
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:33
    // vote = BoxMap<VoteIdType, VoteDataType>({ keyPrefix: '_v' })
    bytec 5 // "_v"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:199
    // return this.vote(voteId).exists
    box_len
    bury 1
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:217-220
    // assert(
    //   this.hasVoted(proposal_id, Txn.sender),
    //   'The user has not voted on this proposal, therefore cannot claim rewards',
    // )
    assert // The user has not voted on this proposal, therefore cannot claim rewards
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:224
    // currentProposal.proposal_prize_pool.native / currentProposal.proposal_total_votes.native,
    dup
    pushint 32 // 32
    extract_uint64
    dig 1
    pushint 16 // 16
    extract_uint64
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:223-225
    // const rewardAmount = Uint64(
    //   currentProposal.proposal_prize_pool.native / currentProposal.proposal_total_votes.native,
    // )
    dig 1
    swap
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:224
    // currentProposal.proposal_prize_pool.native / currentProposal.proposal_total_votes.native,
    /
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:229-237
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: currentProposal.proposal_asset.native,
    //     assetAmount: rewardAmount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_begin
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:231
    // assetReceiver: Txn.sender,
    txn Sender
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:232
    // sender: op.Global.currentApplicationAddress,
    global CurrentApplicationAddress
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:233
    // xferAsset: currentProposal.proposal_asset.native,
    dig 4
    pushint 40 // 40
    extract_uint64
    dig 3
    itxn_field AssetAmount
    itxn_field XferAsset
    itxn_field Sender
    itxn_field AssetReceiver
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:229-236
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: currentProposal.proposal_asset.native,
    //     assetAmount: rewardAmount,
    //     fee: 0,
    //   })
    intc_2 // 4
    itxn_field TypeEnum
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:235
    // fee: 0,
    intc_0 // 0
    itxn_field Fee
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:229-237
    // itxn
    //   .assetTransfer({
    //     assetReceiver: Txn.sender,
    //     sender: op.Global.currentApplicationAddress,
    //     xferAsset: currentProposal.proposal_asset.native,
    //     assetAmount: rewardAmount,
    //     fee: 0,
    //   })
    //   .submit()
    itxn_submit
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:241
    // updatedProposal.proposal_prize_pool = new arc4.UintN64(updatedProposal.proposal_prize_pool.native - rewardAmount)
    -
    itob
    replace2 32
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:243
    // this.proposal(new arc4.UintN64(proposal_id)).value = updatedProposal.copy()
    dig 1
    box_del
    pop
    box_put
    retsub


// smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts::YesNoReward.getProposal(proposal_id: uint64) -> bytes:
getProposal:
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:246-247
    // @abimethod({ allowActions: 'NoOp', readonly: true })
    // public getProposal(proposal_id: uint64): ProposalDataType {
    proto 1 1
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:248
    // const proposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    frame_dig -1
    itob
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:30
    // proposal = BoxMap<ProposalIdType, ProposalDataType>({ keyPrefix: '_p' })
    bytec_1 // "_p"
    swap
    concat
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:248
    // const proposal: ProposalDataType = this.proposal(new arc4.UintN64(proposal_id)).value.copy()
    box_get
    assert // Box must have value
    // smart_contracts/we_dao/yes_no_rewards_dao/YesNoReward.algo.ts:249
    // return proposal
    retsub
