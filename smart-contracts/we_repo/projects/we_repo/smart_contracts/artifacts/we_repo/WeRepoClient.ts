/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"WeRepo","structs":{"ProjectDataType":[{"name":"projectContribution","type":"uint64"},{"name":"projectDapps","type":"uint64[]"},{"name":"projectNameAndDescription","type":"string"}]},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":["NoOp"],"call":[]},"readonly":false,"events":[],"recommendations":{}},{"name":"ping","args":[{"type":"string","name":"ping"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createNewProject","args":[{"type":"string","name":"projectName"},{"type":"string","name":"projectDescription"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"addNewDappsToProject","args":[{"type":"uint64[]","name":"dappIds"},{"type":"account","name":"creatorAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":2},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"bWFuYWdlcl9hZGRyZXNz"},"total_projects":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcHJvamVjdHM="},"total_reputation":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcmVwdXRhdGlvbg=="},"total_contribution":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfY29udHJpYnV0aW9u"},"pong":{"keyType":"AVMString","valueType":"AVMString","key":"cG9uZw=="}},"local":{},"box":{"project":{"keyType":"AVMString","valueType":"ProjectDataType","key":"X3A="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":[],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[305,316,323],"errorMessage":"Box must have value"},{"pc":[317],"errorMessage":"Index access is out of bounds"},{"pc":[77,98,122,140],"errorMessage":"OnCompletion is not NoOp"},{"pc":[240],"errorMessage":"Project already exists for this address"},{"pc":[302],"errorMessage":"Project does not exist for this address"},{"pc":[144],"errorMessage":"can only call when creating"},{"pc":[80,101,125],"errorMessage":"can only call when not creating"},{"pc":[279],"errorMessage":"check GlobalState exists"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEKCCYDDnRvdGFsX3Byb2plY3RzAl9wBHBvbmcxG0EAI4IEBLhEezYEhVNBxQTrA8knBEC71AU2GgCOBABBAC8AFwACIkMxGRREMRhENhoBNhoCF8AciADGI0MxGRREMRhENhoBVwIANhoCVwIAiABvI0MxGRREMRhENhoBVwIAiABVI0MxGRREMRgURIgAAiNDgA9tYW5hZ2VyX2FkZHJlc3MxAGcoImeAEHRvdGFsX3JlcHV0YXRpb24iZ4ASdG90YWxfY29udHJpYnV0aW9uImcqgABniYoBACqL/2eJigIAKTEAUEm9RQEURIv+gAE7UIv/UEkVFlcGAkxQgA4AAAAAAAAAAAAMAA4AAExQIihlRCMIKExnSwG8SL+JigIAKYv/UEm9RQFESb5ESSRZSwEVUksBvkRXAAhPAr5ESSVZSwEkWVJMgAIADFBLARWBDAgWVwYCUExQTFCL/iJZIosCiwEMQQBii/5XAgCLAklOAiULW4sASSVZSwEkWUsCSwJLAlJXAgBPBBZQSRUlChZXBgJMUEsDIksEWEsEFU8FSwRPAlJMSwJQTFBPAk8DCU8CFUsCJFkITAkWVwYCXAqMACMIjAJC/5YpMQBQSbxIiwC/iQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProjectDataType = {
  projectContribution: bigint,
  projectDapps: bigint[],
  projectNameAndDescription: string
}


/**
 * Converts the ABI tuple representation of a ProjectDataType to the struct representation
 */
export function ProjectDataTypeFromTuple(abiTuple: [bigint, bigint[], string]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProjectDataType, APP_SPEC.structs) as ProjectDataType
}

/**
 * The argument types for the WeRepo contract
 */
export type WeRepoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'ping(string)void': {
      ping: string
    }
    'createNewProject(string,string)void': {
      projectName: string
      projectDescription: string
    }
    'addNewDappsToProject(uint64[],account)void': {
      dappIds: bigint[] | number[]
      creatorAddress: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'ping(string)void': [ping: string]
    'createNewProject(string,string)void': [projectName: string, projectDescription: string]
    'addNewDappsToProject(uint64[],account)void': [dappIds: bigint[] | number[], creatorAddress: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type WeRepoReturns = {
  'createApplication()void': void
  'ping(string)void': void
  'createNewProject(string,string)void': void
  'addNewDappsToProject(uint64[],account)void': void
}

/**
 * Defines the types of available calls and state of the WeRepo smart contract.
 */
export type WeRepoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: WeRepoArgs['obj']['createApplication()void']
      argsTuple: WeRepoArgs['tuple']['createApplication()void']
      returns: WeRepoReturns['createApplication()void']
    }>
    & Record<'ping(string)void' | 'ping', {
      argsObj: WeRepoArgs['obj']['ping(string)void']
      argsTuple: WeRepoArgs['tuple']['ping(string)void']
      returns: WeRepoReturns['ping(string)void']
    }>
    & Record<'createNewProject(string,string)void' | 'createNewProject', {
      argsObj: WeRepoArgs['obj']['createNewProject(string,string)void']
      argsTuple: WeRepoArgs['tuple']['createNewProject(string,string)void']
      returns: WeRepoReturns['createNewProject(string,string)void']
    }>
    & Record<'addNewDappsToProject(uint64[],account)void' | 'addNewDappsToProject', {
      argsObj: WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void']
      argsTuple: WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']
      returns: WeRepoReturns['addNewDappsToProject(uint64[],account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: BinaryState
        totalProjects: bigint
        totalReputation: bigint
        totalContribution: bigint
        pong: string
      }
      maps: {}
    }
    box: {
      keys: {
        project: ProjectDataType
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WeRepoSignatures = keyof WeRepoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WeRepoNonVoidMethodSignatures = keyof WeRepoTypes['methods'] extends infer T ? T extends keyof WeRepoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WeRepo smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WeRepoSignatures> = WeRepoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WeRepo smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WeRepoSignatures> = WeRepoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WeRepoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WeRepoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WeRepoCreateCallParams =
  | Expand<CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WeRepoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WeRepoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WeRepo smart contract
 */
export abstract class WeRepoParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends WeRepoCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return WeRepoParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the WeRepo smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the ping(string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static ping(params: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'ping(string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.ping],
    }
  }
  /**
   * Constructs a no op call for the createNewProject(string,string)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProject(params: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProject(string,string)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.projectName, params.args.projectDescription],
    }
  }
  /**
   * Constructs a no op call for the addNewDappsToProject(uint64[],account)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addNewDappsToProject(params: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addNewDappsToProject(uint64[],account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.dappIds, params.args.creatorAddress],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the WeRepo smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WeRepoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WeRepoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WeRepoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WeRepoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the WeRepo smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WeRepoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? WeRepoParamsFactory.create._resolveByMethod(params.createParams) : params.createParams ? params.createParams as (WeRepoCreateCallParams & { args: Uint8Array[] }) : undefined,
    })
    return { result: result.result, appClient: new WeRepoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create params
       */
      createApplication: (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.params.create(WeRepoParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create transaction
       */
      createApplication: (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        return this.appFactory.createTransaction.create(WeRepoParamsFactory.create.createApplication(params))
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using an ABI method call using the createApplication()void ABI method.
       *
       * @param params The params for the smart contract call
       * @returns The create result
       */
      createApplication: async (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
        const result = await this.appFactory.send.create(WeRepoParamsFactory.create.createApplication(params))
        return { result: { ...result.result, return: result.result.return as unknown as (undefined | WeRepoReturns['createApplication()void']) }, appClient: new WeRepoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the WeRepo smart contract
 */
export class WeRepoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WeRepo app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WeRepoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WeRepoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WeRepoClient> {
    return new WeRepoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WeRepoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WeRepoClient> {
    return new WeRepoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `ping(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    ping: (params: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeRepoParamsFactory.ping(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProject: (params: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeRepoParamsFactory.createNewProject(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `addNewDappsToProject(uint64[],account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addNewDappsToProject: (params: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeRepoParamsFactory.addNewDappsToProject(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `ping(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    ping: (params: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeRepoParamsFactory.ping(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProject: (params: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeRepoParamsFactory.createNewProject(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `addNewDappsToProject(uint64[],account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addNewDappsToProject: (params: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeRepoParamsFactory.addNewDappsToProject(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `ping(string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    ping: async (params: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeRepoParamsFactory.ping(params))
      return {...result, return: result.return as unknown as (undefined | WeRepoReturns['ping(string)void'])}
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject(string,string)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProject: async (params: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeRepoParamsFactory.createNewProject(params))
      return {...result, return: result.return as unknown as (undefined | WeRepoReturns['createNewProject(string,string)void'])}
    },

    /**
     * Makes a call to the WeRepo smart contract using the `addNewDappsToProject(uint64[],account)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addNewDappsToProject: async (params: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeRepoParamsFactory.addNewDappsToProject(params))
      return {...result, return: result.return as unknown as (undefined | WeRepoReturns['addNewDappsToProject(uint64[],account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WeRepoClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current WeRepo app
   */
  state = {
    /**
     * Methods to access global state for the current WeRepo app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: new BinaryStateValue(result.manager_address),
          totalProjects: result.total_projects,
          totalReputation: result.total_reputation,
          totalContribution: result.total_contribution,
          pong: result.pong,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the total_projects key in global state
       */
      totalProjects: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_projects")) as bigint | undefined },
      /**
       * Get the current value of the total_reputation key in global state
       */
      totalReputation: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_reputation")) as bigint | undefined },
      /**
       * Get the current value of the total_contribution key in global state
       */
      totalContribution: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_contribution")) as bigint | undefined },
      /**
       * Get the current value of the pong key in global state
       */
      pong: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("pong")) as string | undefined },
    },
    /**
     * Methods to access box state for the current WeRepo app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          project: result.project,
        }
      },
      /**
       * Get the current value of the project key in box state
       */
      project: async (): Promise<ProjectDataType | undefined> => { return (await this.appClient.state.box.getValue("project")) as ProjectDataType | undefined },
    },
  }

  public newGroup(): WeRepoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a ping(string)void method call against the WeRepo contract
       */
      ping(params: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.ping(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createNewProject(string,string)void method call against the WeRepo contract
       */
      createNewProject(params: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProject(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addNewDappsToProject(uint64[],account)void method call against the WeRepo contract
       */
      addNewDappsToProject(params: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addNewDappsToProject(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the WeRepo contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WeRepoComposer
  }
}
export type WeRepoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the ping(string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  ping(params?: CallParams<WeRepoArgs['obj']['ping(string)void'] | WeRepoArgs['tuple']['ping(string)void']>): WeRepoComposer<[...TReturns, WeRepoReturns['ping(string)void'] | undefined]>

  /**
   * Calls the createNewProject(string,string)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProject(params?: CallParams<WeRepoArgs['obj']['createNewProject(string,string)void'] | WeRepoArgs['tuple']['createNewProject(string,string)void']>): WeRepoComposer<[...TReturns, WeRepoReturns['createNewProject(string,string)void'] | undefined]>

  /**
   * Calls the addNewDappsToProject(uint64[],account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addNewDappsToProject(params?: CallParams<WeRepoArgs['obj']['addNewDappsToProject(uint64[],account)void'] | WeRepoArgs['tuple']['addNewDappsToProject(uint64[],account)void']>): WeRepoComposer<[...TReturns, WeRepoReturns['addNewDappsToProject(uint64[],account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the WeRepo smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WeRepoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WeRepoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WeRepoComposerResults<TReturns>>
}
export type WeRepoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

