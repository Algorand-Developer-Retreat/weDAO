/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"WeRepo","structs":{"ProjectDataType":[{"name":"projectName","type":"string"},{"name":"projectDescription","type":"string"},{"name":"projectContribution","type":"uint64"}]},"methods":[{"name":"createApplication","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"createNewProject","args":[{"type":"(string,string,uint64)","struct":"ProjectDataType","name":"projectData"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":3,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"manager_address":{"keyType":"AVMString","valueType":"AVMBytes","key":"bWFuYWdlcl9hZGRyZXNz"},"total_projects":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcHJvamVjdHM="},"total_reputation":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfcmVwdXRhdGlvbg=="},"total_contribution":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxfY29udHJpYnV0aW9u"}},"local":{},"box":{"project":{"keyType":"AVMString","valueType":"ProjectDataType","key":"X3A="}}},"maps":{"global":{},"local":{},"box":{}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[36,51],"errorMessage":"OnCompletion is not NoOp"},{"pc":[167],"errorMessage":"Project already exists for this address"},{"pc":[68],"errorMessage":"can only call when creating"},{"pc":[39,54],"errorMessage":"can only call when not creating"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYXJjNC9pbmRleC5kLnRzOjpDb250cmFjdC5hcHByb3ZhbFByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBpbnRjYmxvY2sgMCAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjEzCiAgICAvLyBleHBvcnQgY2xhc3MgV2VSZXBvIGV4dGVuZHMgQ29udHJhY3QgewogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fYmFyZV9yb3V0aW5nQDcKICAgIHB1c2hieXRlc3MgMHhiODQ0N2IzNiAweGMzNmU1ZDcyIC8vIG1ldGhvZCAiY3JlYXRlQXBwbGljYXRpb24oKXZvaWQiLCBtZXRob2QgImNyZWF0ZU5ld1Byb2plY3QoKHN0cmluZyxzdHJpbmcsdWludDY0KSl2b2lkIgogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMAogICAgbWF0Y2ggbWFpbl9jcmVhdGVBcHBsaWNhdGlvbl9yb3V0ZUAzIG1haW5fY3JlYXRlTmV3UHJvamVjdF9yb3V0ZUA0CgptYWluX2FmdGVyX2lmX2Vsc2VAMTE6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjEzCiAgICAvLyBleHBvcnQgY2xhc3MgV2VSZXBvIGV4dGVuZHMgQ29udHJhY3QgewogICAgaW50Y18wIC8vIDAKICAgIHJldHVybgoKbWFpbl9jcmVhdGVOZXdQcm9qZWN0X3JvdXRlQDQ6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgY3JlYXRlTmV3UHJvamVjdChwcm9qZWN0RGF0YTogUHJvamVjdERhdGFUeXBlKTogdm9pZCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICBhc3NlcnQgLy8gT25Db21wbGV0aW9uIGlzIG5vdCBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBub3QgY3JlYXRpbmcKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MTMKICAgIC8vIGV4cG9ydCBjbGFzcyBXZVJlcG8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAxCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgY3JlYXRlTmV3UHJvamVjdChwcm9qZWN0RGF0YTogUHJvamVjdERhdGFUeXBlKTogdm9pZCB7CiAgICBjYWxsc3ViIGNyZWF0ZU5ld1Byb2plY3QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCm1haW5fY3JlYXRlQXBwbGljYXRpb25fcm91dGVAMzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MjIKICAgIC8vIHB1YmxpYyBjcmVhdGVBcHBsaWNhdGlvbigpOiB2b2lkIHsKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gaXMgbm90IE5vT3AKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBhc3NlcnQgLy8gY2FuIG9ubHkgY2FsbCB3aGVuIG5vdCBjcmVhdGluZwogICAgY2FsbHN1YiBjcmVhdGVBcHBsaWNhdGlvbgogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKbWFpbl9iYXJlX3JvdXRpbmdANzoKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MTMKICAgIC8vIGV4cG9ydCBjbGFzcyBXZVJlcG8gZXh0ZW5kcyBDb250cmFjdCB7CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDExCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgYXNzZXJ0IC8vIGNhbiBvbmx5IGNhbGwgd2hlbiBjcmVhdGluZwogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6OldlUmVwby5jcmVhdGVBcHBsaWNhdGlvbigpIC0+IHZvaWQ6CmNyZWF0ZUFwcGxpY2F0aW9uOgogICAgLy8gc21hcnRfY29udHJhY3RzL3dlX3JlcG8vY29udHJhY3QuYWxnby50czoxNQogICAgLy8gbWFuYWdlcl9hZGRyZXNzID0gR2xvYmFsU3RhdGU8QWNjb3VudD4oKQogICAgcHVzaGJ5dGVzICJtYW5hZ2VyX2FkZHJlc3MiCiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjIzCiAgICAvLyB0aGlzLm1hbmFnZXJfYWRkcmVzcy52YWx1ZSA9IFR4bi5zZW5kZXIKICAgIHR4biBTZW5kZXIKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjE2CiAgICAvLyB0b3RhbF9wcm9qZWN0cyA9IEdsb2JhbFN0YXRlPHVpbnQ2ND4oKQogICAgcHVzaGJ5dGVzICJ0b3RhbF9wcm9qZWN0cyIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MjQKICAgIC8vIHRoaXMudG90YWxfcHJvamVjdHMudmFsdWUgPSAwCiAgICBpbnRjXzAgLy8gMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MTcKICAgIC8vIHRvdGFsX3JlcHV0YXRpb24gPSBHbG9iYWxTdGF0ZTx1aW50NjQ+KCkKICAgIHB1c2hieXRlcyAidG90YWxfcmVwdXRhdGlvbiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MjUKICAgIC8vIHRoaXMudG90YWxfcmVwdXRhdGlvbi52YWx1ZSA9IDAKICAgIGludGNfMCAvLyAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gc21hcnRfY29udHJhY3RzL3dlX3JlcG8vY29udHJhY3QuYWxnby50czoxOAogICAgLy8gdG90YWxfY29udHJpYnV0aW9uID0gR2xvYmFsU3RhdGU8dWludDY0PigpCiAgICBwdXNoYnl0ZXMgInRvdGFsX2NvbnRyaWJ1dGlvbiIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MjYKICAgIC8vIHRoaXMudG90YWxfY29udHJpYnV0aW9uLnZhbHVlID0gMAogICAgaW50Y18wIC8vIDAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICByZXRzdWIKCgovLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjpXZVJlcG8uY3JlYXRlTmV3UHJvamVjdChwcm9qZWN0RGF0YTogYnl0ZXMpIC0+IHZvaWQ6CmNyZWF0ZU5ld1Byb2plY3Q6CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjI5CiAgICAvLyBwdWJsaWMgY3JlYXRlTmV3UHJvamVjdChwcm9qZWN0RGF0YTogUHJvamVjdERhdGFUeXBlKTogdm9pZCB7CiAgICBwcm90byAxIDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MjAKICAgIC8vIHByb2plY3QgPSBCb3hNYXA8UHJvamVjdElkVHlwZSwgUHJvamVjdERhdGFUeXBlPih7IGtleVByZWZpeDogJ19wJyB9KQogICAgcHVzaGJ5dGVzICJfcCIKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MzAKICAgIC8vIGNvbnN0IGNyZWF0b3JBZGRyZXNzOiBBY2NvdW50ID0gVHhuLnNlbmRlcgogICAgdHhuIFNlbmRlcgogICAgLy8gc21hcnRfY29udHJhY3RzL3dlX3JlcG8vY29udHJhY3QuYWxnby50czoyMAogICAgLy8gcHJvamVjdCA9IEJveE1hcDxQcm9qZWN0SWRUeXBlLCBQcm9qZWN0RGF0YVR5cGU+KHsga2V5UHJlZml4OiAnX3AnIH0pCiAgICBjb25jYXQKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MzYKICAgIC8vIGFzc2VydCghY3VycmVudFByb2plY3RJbnN0YW5jZS5leGlzdHMsICdQcm9qZWN0IGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIGFkZHJlc3MnKQogICAgZHVwCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIGFzc2VydCAvLyBQcm9qZWN0IGFscmVhZHkgZXhpc3RzIGZvciB0aGlzIGFkZHJlc3MKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6NDAKICAgIC8vIHByb2plY3RfbmFtZTogcHJvamVjdERhdGEucHJvamVjdF9uYW1lLAogICAgZnJhbWVfZGlnIC0xCiAgICBpbnRjXzAgLy8gMAogICAgZXh0cmFjdF91aW50MTYKICAgIGZyYW1lX2RpZyAtMQogICAgcHVzaGludCAyIC8vIDIKICAgIGV4dHJhY3RfdWludDE2CiAgICBmcmFtZV9kaWcgLTEKICAgIHVuY292ZXIgMgogICAgZGlnIDIKICAgIHN1YnN0cmluZzMKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6NDEKICAgIC8vIHByb2plY3RfZGVzY3JpcHRpb246IHByb2plY3REYXRhLnByb2plY3RfZGVzY3JpcHRpb24sCiAgICBmcmFtZV9kaWcgLTEKICAgIGxlbgogICAgZnJhbWVfZGlnIC0xCiAgICB1bmNvdmVyIDMKICAgIHVuY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgLy8gc21hcnRfY29udHJhY3RzL3dlX3JlcG8vY29udHJhY3QuYWxnby50czozOS00MwogICAgLy8gY29uc3QgcHJvamVjdDogUHJvamVjdERhdGFUeXBlID0gbmV3IFByb2plY3REYXRhVHlwZSh7CiAgICAvLyAgIHByb2plY3RfbmFtZTogcHJvamVjdERhdGEucHJvamVjdF9uYW1lLAogICAgLy8gICBwcm9qZWN0X2Rlc2NyaXB0aW9uOiBwcm9qZWN0RGF0YS5wcm9qZWN0X2Rlc2NyaXB0aW9uLAogICAgLy8gICBwcm9qZWN0X2NvbnRyaWJ1dGlvbjogbmV3IGFyYzQuVWludE42NCgwKSwKICAgIC8vIH0pCiAgICBkaWcgMQogICAgbGVuCiAgICBwdXNoaW50IDEyIC8vIDEyCiAgICArCiAgICBpdG9iCiAgICBleHRyYWN0IDYgMgogICAgcHVzaGJ5dGVzIDB4MDAwYwogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjQyCiAgICAvLyBwcm9qZWN0X2NvbnRyaWJ1dGlvbjogbmV3IGFyYzQuVWludE42NCgwKSwKICAgIHB1c2hieXRlcyAweDAwMDAwMDAwMDAwMDAwMDAKICAgIC8vIHNtYXJ0X2NvbnRyYWN0cy93ZV9yZXBvL2NvbnRyYWN0LmFsZ28udHM6MzktNDMKICAgIC8vIGNvbnN0IHByb2plY3Q6IFByb2plY3REYXRhVHlwZSA9IG5ldyBQcm9qZWN0RGF0YVR5cGUoewogICAgLy8gICBwcm9qZWN0X25hbWU6IHByb2plY3REYXRhLnByb2plY3RfbmFtZSwKICAgIC8vICAgcHJvamVjdF9kZXNjcmlwdGlvbjogcHJvamVjdERhdGEucHJvamVjdF9kZXNjcmlwdGlvbiwKICAgIC8vICAgcHJvamVjdF9jb250cmlidXRpb246IG5ldyBhcmM0LlVpbnRONjQoMCksCiAgICAvLyB9KQogICAgY29uY2F0CiAgICB1bmNvdmVyIDIKICAgIGNvbmNhdAogICAgc3dhcAogICAgY29uY2F0CiAgICAvLyBzbWFydF9jb250cmFjdHMvd2VfcmVwby9jb250cmFjdC5hbGdvLnRzOjQ1CiAgICAvLyB0aGlzLnByb2plY3QobmV3IGFyYzQuQWRkcmVzcyhjcmVhdG9yQWRkcmVzcykpLnZhbHVlID0gcHJvamVjdC5jb3B5KCkKICAgIGRpZyAxCiAgICBib3hfZGVsCiAgICBwb3AKICAgIGJveF9wdXQKICAgIHJldHN1Ygo=","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiACAAExG0EAMoICBLhEezYEw25dcjYaAI4CABEAAiJDMRkURDEYRDYaAYgAaiNDMRkURDEYRIgADSNDMRlA/94xGBREI0OAD21hbmFnZXJfYWRkcmVzczEAZ4AOdG90YWxfcHJvamVjdHMiZ4AQdG90YWxfcmVwdXRhdGlvbiJngBJ0b3RhbF9jb250cmlidXRpb24iZ4mKAQCAAl9wMQBQSb1FARREi/8iWYv/gQJZi/9PAksCUov/FYv/TwNPAlJLARWBDAgWVwYCgAIADExQgAgAAAAAAAAAAFBPAlBMUEsBvEi/iQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":5,"patch":3}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type ProjectDataType = {
  projectName: string,
  projectDescription: string,
  projectContribution: bigint
}


/**
 * Converts the ABI tuple representation of a ProjectDataType to the struct representation
 */
export function ProjectDataTypeFromTuple(abiTuple: [string, string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.ProjectDataType, APP_SPEC.structs) as ProjectDataType
}

/**
 * The argument types for the WeRepo contract
 */
export type WeRepoArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'createApplication()void': Record<string, never>
    'createNewProject((string,string,uint64))void': {
      projectData: ProjectDataType
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'createApplication()void': []
    'createNewProject((string,string,uint64))void': [projectData: ProjectDataType]
  }
}

/**
 * The return type for each method
 */
export type WeRepoReturns = {
  'createApplication()void': void
  'createNewProject((string,string,uint64))void': void
}

/**
 * Defines the types of available calls and state of the WeRepo smart contract.
 */
export type WeRepoTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: WeRepoArgs['obj']['createApplication()void']
      argsTuple: WeRepoArgs['tuple']['createApplication()void']
      returns: WeRepoReturns['createApplication()void']
    }>
    & Record<'createNewProject((string,string,uint64))void' | 'createNewProject', {
      argsObj: WeRepoArgs['obj']['createNewProject((string,string,uint64))void']
      argsTuple: WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']
      returns: WeRepoReturns['createNewProject((string,string,uint64))void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        managerAddress: BinaryState
        totalProjects: bigint
        totalReputation: bigint
        totalContribution: bigint
      }
      maps: {}
    }
    box: {
      keys: {
        project: ProjectDataType
      }
      maps: {}
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type WeRepoSignatures = keyof WeRepoTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type WeRepoNonVoidMethodSignatures = keyof WeRepoTypes['methods'] extends infer T ? T extends keyof WeRepoTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the WeRepo smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends WeRepoSignatures> = WeRepoTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the WeRepo smart contract to the method's return type
 */
export type MethodReturn<TSignature extends WeRepoSignatures> = WeRepoTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = WeRepoTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = WeRepoTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type WeRepoCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type WeRepoDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: WeRepoCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the WeRepo smart contract
 */
export abstract class WeRepoParamsFactory {
  /**
   * Constructs a no op call for the createApplication()void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createApplication(params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createApplication()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the createNewProject((string,string,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createNewProject(params: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createNewProject((string,string,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.projectData],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the WeRepo smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class WeRepoFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `WeRepoFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new WeRepoClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new WeRepoClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the WeRepo smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: WeRepoDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new WeRepoClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the WeRepo smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new WeRepoClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the WeRepo smart contract
 */
export class WeRepoClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param appClient An `AppClient` instance which has been created with the WeRepo app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `WeRepoClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends WeRepoNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `WeRepoClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<WeRepoClient> {
    return new WeRepoClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `WeRepoClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<WeRepoClient> {
    return new WeRepoClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createApplication: (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(WeRepoParamsFactory.createApplication(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject((string,string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createNewProject: (params: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(WeRepoParamsFactory.createNewProject(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createApplication: (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(WeRepoParamsFactory.createApplication(params))
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject((string,string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createNewProject: (params: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(WeRepoParamsFactory.createNewProject(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the WeRepo smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createApplication()void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createApplication: async (params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(WeRepoParamsFactory.createApplication(params))
      return {...result, return: result.return as unknown as (undefined | WeRepoReturns['createApplication()void'])}
    },

    /**
     * Makes a call to the WeRepo smart contract using the `createNewProject((string,string,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createNewProject: async (params: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(WeRepoParamsFactory.createNewProject(params))
      return {...result, return: result.return as unknown as (undefined | WeRepoReturns['createNewProject((string,string,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new WeRepoClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current WeRepo app
   */
  state = {
    /**
     * Methods to access global state for the current WeRepo app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          managerAddress: new BinaryStateValue(result.manager_address),
          totalProjects: result.total_projects,
          totalReputation: result.total_reputation,
          totalContribution: result.total_contribution,
        }
      },
      /**
       * Get the current value of the manager_address key in global state
       */
      managerAddress: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("manager_address")) as Uint8Array | undefined) },
      /**
       * Get the current value of the total_projects key in global state
       */
      totalProjects: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_projects")) as bigint | undefined },
      /**
       * Get the current value of the total_reputation key in global state
       */
      totalReputation: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_reputation")) as bigint | undefined },
      /**
       * Get the current value of the total_contribution key in global state
       */
      totalContribution: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("total_contribution")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current WeRepo app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
          project: result.project,
        }
      },
      /**
       * Get the current value of the project key in box state
       */
      project: async (): Promise<ProjectDataType | undefined> => { return (await this.appClient.state.box.getValue("project")) as ProjectDataType | undefined },
    },
  }

  public newGroup(): WeRepoComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createApplication()void method call against the WeRepo contract
       */
      createApplication(params: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createApplication(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a createNewProject((string,string,uint64))void method call against the WeRepo contract
       */
      createNewProject(params: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createNewProject(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the WeRepo contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as WeRepoComposer
  }
}
export type WeRepoComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createApplication()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createApplication(params?: CallParams<WeRepoArgs['obj']['createApplication()void'] | WeRepoArgs['tuple']['createApplication()void']>): WeRepoComposer<[...TReturns, WeRepoReturns['createApplication()void'] | undefined]>

  /**
   * Calls the createNewProject((string,string,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createNewProject(params?: CallParams<WeRepoArgs['obj']['createNewProject((string,string,uint64))void'] | WeRepoArgs['tuple']['createNewProject((string,string,uint64))void']>): WeRepoComposer<[...TReturns, WeRepoReturns['createNewProject((string,string,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the WeRepo smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): WeRepoComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): WeRepoComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<WeRepoComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<WeRepoComposerResults<TReturns>>
}
export type WeRepoComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

