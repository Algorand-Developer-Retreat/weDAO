#pragma version 10
#pragma typetrack false

// @algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram() -> uint64:
main:
    intcblock 0 1
    // smart_contracts/we_repo/contract.algo.ts:13
    // export class WeRepo extends Contract {
    txn NumAppArgs
    bz main_bare_routing@7
    pushbytess 0xb8447b36 0xc36e5d72 // method "createApplication()void", method "createNewProject((string,string,uint64))void"
    txna ApplicationArgs 0
    match main_createApplication_route@3 main_createNewProject_route@4

main_after_if_else@11:
    // smart_contracts/we_repo/contract.algo.ts:13
    // export class WeRepo extends Contract {
    intc_0 // 0
    return

main_createNewProject_route@4:
    // smart_contracts/we_repo/contract.algo.ts:29
    // public createNewProject(projectData: ProjectDataType): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    // smart_contracts/we_repo/contract.algo.ts:13
    // export class WeRepo extends Contract {
    txna ApplicationArgs 1
    // smart_contracts/we_repo/contract.algo.ts:29
    // public createNewProject(projectData: ProjectDataType): void {
    callsub createNewProject
    intc_1 // 1
    return

main_createApplication_route@3:
    // smart_contracts/we_repo/contract.algo.ts:22
    // public createApplication(): void {
    txn OnCompletion
    !
    assert // OnCompletion is not NoOp
    txn ApplicationID
    assert // can only call when not creating
    callsub createApplication
    intc_1 // 1
    return

main_bare_routing@7:
    // smart_contracts/we_repo/contract.algo.ts:13
    // export class WeRepo extends Contract {
    txn OnCompletion
    bnz main_after_if_else@11
    txn ApplicationID
    !
    assert // can only call when creating
    intc_1 // 1
    return


// smart_contracts/we_repo/contract.algo.ts::WeRepo.createApplication() -> void:
createApplication:
    // smart_contracts/we_repo/contract.algo.ts:15
    // manager_address = GlobalState<Account>()
    pushbytes "manager_address"
    // smart_contracts/we_repo/contract.algo.ts:23
    // this.manager_address.value = Txn.sender
    txn Sender
    app_global_put
    // smart_contracts/we_repo/contract.algo.ts:16
    // total_projects = GlobalState<uint64>()
    pushbytes "total_projects"
    // smart_contracts/we_repo/contract.algo.ts:24
    // this.total_projects.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/we_repo/contract.algo.ts:17
    // total_reputation = GlobalState<uint64>()
    pushbytes "total_reputation"
    // smart_contracts/we_repo/contract.algo.ts:25
    // this.total_reputation.value = 0
    intc_0 // 0
    app_global_put
    // smart_contracts/we_repo/contract.algo.ts:18
    // total_contribution = GlobalState<uint64>()
    pushbytes "total_contribution"
    // smart_contracts/we_repo/contract.algo.ts:26
    // this.total_contribution.value = 0
    intc_0 // 0
    app_global_put
    retsub


// smart_contracts/we_repo/contract.algo.ts::WeRepo.createNewProject(projectData: bytes) -> void:
createNewProject:
    // smart_contracts/we_repo/contract.algo.ts:29
    // public createNewProject(projectData: ProjectDataType): void {
    proto 1 0
    // smart_contracts/we_repo/contract.algo.ts:20
    // project = BoxMap<ProjectIdType, ProjectDataType>({ keyPrefix: '_p' })
    pushbytes "_p"
    // smart_contracts/we_repo/contract.algo.ts:30
    // const creatorAddress: Account = Txn.sender
    txn Sender
    // smart_contracts/we_repo/contract.algo.ts:20
    // project = BoxMap<ProjectIdType, ProjectDataType>({ keyPrefix: '_p' })
    concat
    // smart_contracts/we_repo/contract.algo.ts:36
    // assert(!currentProjectInstance.exists, 'Project already exists for this address')
    dup
    box_len
    bury 1
    !
    assert // Project already exists for this address
    // smart_contracts/we_repo/contract.algo.ts:40
    // project_name: projectData.project_name,
    frame_dig -1
    intc_0 // 0
    extract_uint16
    frame_dig -1
    pushint 2 // 2
    extract_uint16
    frame_dig -1
    uncover 2
    dig 2
    substring3
    // smart_contracts/we_repo/contract.algo.ts:41
    // project_description: projectData.project_description,
    frame_dig -1
    len
    frame_dig -1
    uncover 3
    uncover 2
    substring3
    // smart_contracts/we_repo/contract.algo.ts:39-43
    // const project: ProjectDataType = new ProjectDataType({
    //   project_name: projectData.project_name,
    //   project_description: projectData.project_description,
    //   project_contribution: new arc4.UintN64(0),
    // })
    dig 1
    len
    pushint 12 // 12
    +
    itob
    extract 6 2
    pushbytes 0x000c
    swap
    concat
    // smart_contracts/we_repo/contract.algo.ts:42
    // project_contribution: new arc4.UintN64(0),
    pushbytes 0x0000000000000000
    // smart_contracts/we_repo/contract.algo.ts:39-43
    // const project: ProjectDataType = new ProjectDataType({
    //   project_name: projectData.project_name,
    //   project_description: projectData.project_description,
    //   project_contribution: new arc4.UintN64(0),
    // })
    concat
    uncover 2
    concat
    swap
    concat
    // smart_contracts/we_repo/contract.algo.ts:45
    // this.project(new arc4.Address(creatorAddress)).value = project.copy()
    dig 1
    box_del
    pop
    box_put
    retsub
